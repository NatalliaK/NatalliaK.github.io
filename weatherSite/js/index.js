(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = drawPageAbout;
function drawPageAbout(htmlEl) {
  htmlEl.innerHTML = '<h2 class="description__title">О сайте прогноза погоды</h2><p class="description__text">При вводе текста в поле ввода и нажатии кнопки "Ввод" (или по клику на кнопке "Искать") пользователь попадает на страницу с прогнозом погоды в заданном городе. Данный город отображается в центре карты. При этом страницу можно добавить в закладки или отправить сообщением - при открытии ссылки должен показаться тот же город.</p><p class="description__text">При изменении центра карты (перетаскивание / зум) отображаются данные по погоде для центра карты.</p><p class="description__text">При поиске города он появляется верхним пунктом в списке последних запросов (нижний блок &#171;История&#187;), остальные пункты опускаются на 1 вниз. Пункты с номером больше 5 исчезают.</p><p class="description__text">По клику на звездочку город, расположенный в центре карты, добавляется в список &#171;Избранное&#187;. Из списка город можно удалить с помощью x возле записи. При клике на запись в списке &#171;Избранное&#187; или &#171;История&#187; происходит переход на сохраненные координаты</p><p class="description__text">Функция загрузки прогноза реализована в двух вариантах - с использованием fetch и с использованием XHR для выбора типа следующего запроса.</p><p class="description__text">Для загрузки прогноза погоды использовался сайт <a href="https://darksky.net/">darksky</a>.</p><p class="description__text">Для получения координат по введенным данным используется API Google Maps.</p><p class="description__text">При входе на страницу сайт определяет местоположение пользователя и перенаправляет на страницу с соответсвующими координатами.</p><p class="description__text">Поддерживаются ссылки с указанием города (например /city/Minsk).</p>';
}

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = drawPageAuthor;
function drawPageAuthor(htmlEl) {
  htmlEl.innerHTML = '<h2 class="description__title">Коротко об авторе</h2><img class="description__img" src="img/cat.jpg" alt="котэ"><p class="description__text  description__text--author">Наташа молодец!</p>';
}

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = writeCurrentWeatherByLocation;
function writeCurrentWeatherByLocation(data) {
  var blockCurrentWeather = document.querySelector('#weather');
  var info = blockCurrentWeather.querySelector('.block-info__wrap');
  var date = new Date(data.currently.time * 1000).toLocaleString('ru', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric'
  });
  var cloudCover = data.currently.summary;
  var icon = data.currently.icon;
  var temp = Math.round(data.currently.temperature);
  var speed = Math.round(data.currently.windSpeed);
  info.innerHTML = '<p><time class="block-info__time">' + date + '</time></p><p><span class="block-info__img-show-weather block-info__img-show-weather--' + icon + '"></span><span>' + cloudCover + '</span></p><p><span>' + temp + '&#176;C</span></p><p>\u0421\u043A\u043E\u0440\u043E\u0441\u0442\u044C \u0432\u0435\u0442\u0440\u0430: ' + speed + ' \u043C/\u0441</p>';
}

},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = addFavorite;

var _storage = require('./storage');

var _askNameCity = require('./askNameCity');

var _askNameCity2 = _interopRequireDefault(_askNameCity);

var _writeFavoriteCityFromStorage = require('./writeFavoriteCityFromStorage');

var _writeFavoriteCityFromStorage2 = _interopRequireDefault(_writeFavoriteCityFromStorage);

var _index = require('../index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function addFavorite(e) {
	if (_index.router.url.match(/city/)) {
		var city = _index.router.url.replace(/city\//, '');
		var addr = _index.router.url;
		addCityByStorage(city, addr);
	} else if (_index.router.url.match(/center/)) {
		var parEl = e.target.parentNode.parentNode;
		(0, _askNameCity2.default)(parEl);

		parEl.querySelector('#cancelName').addEventListener('click', function (_) {
			parEl.querySelector('#modal').remove();
			return;
		});

		parEl.querySelector('#addName').addEventListener('click', function (e) {
			e.preventDefault();
			city = parEl.querySelector('#modal-input').value;
			parEl.querySelector('#modal').remove();
			addr = _index.router.url;
			addCityByStorage(city, addr);
		});
	}
}

function addCityByStorage(city, addr) {
	(0, _storage.getStorage)('city - ' + city).then(function (val) {
		if (!val) {
			var favCityEl = '<li class="block-info__item"><a href="#' + addr + '">' + city + '</a><button data-close="' + city + '" class="close btn"><img data-close="' + city + '" src="img/close.svg"></button></li>';
			return favCityEl;
		}
	}).then(function (el) {
		(0, _storage.setStorage)('city - ' + city, el).then(function (_) {
			(0, _storage.getStorage)('city - ' + city).then(function (el) {
				(0, _writeFavoriteCityFromStorage2.default)(el);
			});
		});
	});
}

},{"../index":11,"./askNameCity":5,"./storage":7,"./writeFavoriteCityFromStorage":9}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = askNameCity;
function askNameCity(htmlEl) {
	console.log(htmlEl);
	var modal = document.createElement('div');

	modal.id = 'modal';
	modal.classList = 'modal';
	modal.innerHTML = '<label><p class="modal__text">Напишите название населенного пункта:</p><input id="modal-input" class="modal__input" type="text" autofocus></label><div class="modal__btn-wrap"><button id="addName" class="modal__btn btn">Готово</button><button id="cancelName" class="modal__btn btn">Отмена</button></div>';
	htmlEl.appendChild(modal);
}

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = removeFavorite;

var _storage = require('./storage');

function removeFavorite() {
  document.querySelector('#favorites').addEventListener('click', function (e) {
    var blockFav = document.querySelector('#favorites');
    if (e.target.hasAttribute('data-close')) {
      if (blockFav.querySelector('ul')) {
        var li = e.target.parentNode.parentNode;
        var ul = li.parentNode;
        var city = li.querySelector('a').innerText;
        (0, _storage.removeFromStorage)('city - ' + city).then(function (_) {
          li.remove();

          if (!ul.childNodes.length) {
            ul.remove();
          }
        });
      }
    }
  });
}

},{"./storage":7}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.getStorage = getStorage;
exports.setStorage = setStorage;
exports.getAllStorage = getAllStorage;
exports.removeFromStorage = removeFromStorage;
function getStorage(keyName) {
	return Promise.resolve(JSON.parse(localStorage.getItem(keyName)));
}

function setStorage(keyName, value) {
	return Promise.resolve(localStorage.setItem(keyName, JSON.stringify(value)));
}

function getAllStorage() {
	return new Promise(function (resolve) {
		var storage = '';
		var keysStorage = [];

		function getKeys() {
			return new Promise(function (resolve) {
				for (var i = 0; i < localStorage.length; i++) {
					var key = localStorage.key(i);
					if (key.match(/city/)) {
						keysStorage.push(key);
					}
					if (i === localStorage.length - 1) resolve(keysStorage);
				}
			});
		}

		getKeys().then(function (keyStorage) {
			keyStorage.forEach(function (key, i) {
				getStorage(key).then(function (value) {
					storage += value;
					if (i === keyStorage.length - 1) resolve(storage);
				});
			});
		});
	});
}

function removeFromStorage(keyName) {
	return Promise.resolve(localStorage.removeItem(keyName));
}

},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = writeAllStorageCities;

var _storage = require('./storage');

var _writeFavoriteCityFromStorage = require('./writeFavoriteCityFromStorage');

var _writeFavoriteCityFromStorage2 = _interopRequireDefault(_writeFavoriteCityFromStorage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function writeAllStorageCities() {
	(0, _storage.getAllStorage)().then(function (data) {
		(0, _writeFavoriteCityFromStorage2.default)(data);
	});
}

},{"./storage":7,"./writeFavoriteCityFromStorage":9}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = writeFavoriteCityFromStorage;
function writeFavoriteCityFromStorage(el) {
	var blockInfo = document.querySelector('#favorites-wrap');

	if (!blockInfo.querySelector('ul')) {
		var ul = document.createElement('ul');
		blockInfo.appendChild(ul);
		ul.classList.add('block-info__list');
	} else {
		ul = blockInfo.querySelector('ul');
	}
	ul.insertAdjacentHTML('afterbegin', el);
}

},{}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = writeWeatherByHistory;
function writeWeatherByHistory(city) {
  var cityName = decodeURI(city);
  var historyBlock = document.querySelector('#history');
  var historyInfo = historyBlock.querySelector('.block-info__wrap');

  if (!historyInfo.querySelector('ul')) {
    historyInfo.innerHTML = '<ul></ul>';
  }

  var list = historyInfo.querySelector('ul');
  var cityItem = document.createElement('li');
  cityItem.innerHTML = '<li><a href="#city/' + cityName + '">' + cityName + '</a></li>';
  list.insertAdjacentHTML('afterbegin', '<li><a href="#city/' + cityName + '">' + cityName + '</a></li>');

  var items = list.querySelectorAll('li');
  if (items.length > 5) {
    items[items.length - 1].remove();
  }
}

},{}],11:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.router = exports.eventBus = undefined;

var _EventBus = require('./utils/EventBus.js');

var _EventBus2 = _interopRequireDefault(_EventBus);

var _router = require('./utils/router.js');

var _router2 = _interopRequireDefault(_router);

var _changeUrl = require('./utils/changeUrl.js');

var _changeUrl2 = _interopRequireDefault(_changeUrl);

var _drawPageWeather = require('./weather/drawPageWeather.js');

var _drawPageWeather2 = _interopRequireDefault(_drawPageWeather);

var _getForecastByLatLng = require('./weather/getForecastByLatLng.js');

var _getForecastByLatLng2 = _interopRequireDefault(_getForecastByLatLng);

var _author = require('./author/author.js');

var _author2 = _interopRequireDefault(_author);

var _about = require('./about/about.js');

var _about2 = _interopRequireDefault(_about);

var _getUserPosition = require('./weather/getUserPosition.js');

var _getUserPosition2 = _interopRequireDefault(_getUserPosition);

var _writeCurrentWeatherByLocation = require('./blockCurrentWeather/writeCurrentWeatherByLocation.js');

var _writeCurrentWeatherByLocation2 = _interopRequireDefault(_writeCurrentWeatherByLocation);

var _writeWeatherByHistory = require('./history/writeWeatherByHistory.js');

var _writeWeatherByHistory2 = _interopRequireDefault(_writeWeatherByHistory);

var _searchCity = require('./search/searchCity.js');

var _searchCity2 = _interopRequireDefault(_searchCity);

var _getWeatherByCity = require('./search/getWeatherByCity.js');

var _getWeatherByCity2 = _interopRequireDefault(_getWeatherByCity);

var _addFavorite = require('./favorite/addFavorite.js');

var _addFavorite2 = _interopRequireDefault(_addFavorite);

var _writeFavoriteCityFromStorage = require('./favorite/writeFavoriteCityFromStorage.js');

var _writeFavoriteCityFromStorage2 = _interopRequireDefault(_writeFavoriteCityFromStorage);

var _writeAllStorageCities = require('./favorite/writeAllStorageCities');

var _writeAllStorageCities2 = _interopRequireDefault(_writeAllStorageCities);

var _removeFavorite = require('./favorite/removeFavorite');

var _removeFavorite2 = _interopRequireDefault(_removeFavorite);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var main = document.querySelector('#main');
var body = document.querySelector('body');

var eventBus = exports.eventBus = new _EventBus2.default();

eventBus.on('author', _author2.default);
eventBus.on('about', _about2.default);
eventBus.on('init', _drawPageWeather2.default);
eventBus.on('changeUrl', _changeUrl2.default);
eventBus.on('getForecast', _getForecastByLatLng2.default);
eventBus.on('currentWeather', _writeCurrentWeatherByLocation2.default);
eventBus.on('historyWeather', _writeWeatherByHistory2.default);
eventBus.once('searchCity', _searchCity2.default);
eventBus.on('getWeatherByCity', _getWeatherByCity2.default);
eventBus.on('writeAllStorageCities', _writeAllStorageCities2.default);
eventBus.on('writeStorageByFavoriteBlock', _writeFavoriteCityFromStorage2.default);
eventBus.once('removeFavorite', _removeFavorite2.default);

var router = exports.router = new _router2.default({
  routes: [{
    name: 'index',
    match: '',
    onEnter: function onEnter() {
      eventBus.trigger('init', main);
      (0, _getUserPosition2.default)().then(function (url) {
        eventBus.trigger('changeUrl', url);
      }).catch(function (url) {
        eventBus.trigger('changeUrl', url);
      });
      (0, _searchCity2.default)();
    }
  }, {
    name: 'weather',
    match: /center=\d+\.*\d*,\d+\.*\d*/,
    onBeforeEnter: function onBeforeEnter() {
      eventBus.on('addFavorite', _addFavorite2.default);
    },

    onEnter: function onEnter() {
      var url = window.location.hash.replace('#', '');
      var location = url.match(/\d+\.*\d*/g);
      var lat = +location[0];
      var lng = +location[1];

      if (!document.querySelector('.weather')) {
        eventBus.trigger('init', main);
        eventBus.trigger('searchCity');
        eventBus.trigger('writeAllStorageCities');
      }

      eventBus.trigger('getForecast', { lat: lat, lng: lng });
      eventBus.trigger('removeFavorite');

      document.querySelector('#star').addEventListener('click', _addFavorite2.default);
    },

    onLeave: function onLeave() {
      eventBus.off('addFavorite');
    }
  }, {
    name: 'city',
    match: /city\/[\wа-я]+/i,
    onBeforeEnter: function onBeforeEnter() {
      eventBus.on('addFavorite', _addFavorite2.default);
    },

    onEnter: function onEnter() {
      var city = router.url.replace('city/', '');

      if (!document.querySelector('.weather')) {
        eventBus.trigger('init', main);
        eventBus.trigger('searchCity');
        eventBus.trigger('writeAllStorageCities');
      }
      eventBus.trigger('getWeatherByCity', city);
      eventBus.trigger('removeFavorite');
      document.querySelector('#star').addEventListener('click', _addFavorite2.default);
    },

    onLeave: function onLeave() {
      eventBus.off('addFavorite');
    }
  }, {
    name: 'about',
    match: 'about',
    onEnter: function onEnter() {
      eventBus.trigger('about', main);
    }
  }, {
    name: 'author',
    match: 'author',
    onEnter: function onEnter() {
      eventBus.trigger('author', main);
    }
  }]
});

},{"./about/about.js":1,"./author/author.js":2,"./blockCurrentWeather/writeCurrentWeatherByLocation.js":3,"./favorite/addFavorite.js":4,"./favorite/removeFavorite":6,"./favorite/writeAllStorageCities":8,"./favorite/writeFavoriteCityFromStorage.js":9,"./history/writeWeatherByHistory.js":10,"./search/getWeatherByCity.js":12,"./search/searchCity.js":13,"./utils/EventBus.js":14,"./utils/changeUrl.js":15,"./utils/router.js":16,"./weather/drawPageWeather.js":17,"./weather/getForecastByLatLng.js":18,"./weather/getUserPosition.js":19}],12:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getWeatherByCity;

var _index = require('../index.js');

var _getUserPosition = require('../weather/getUserPosition.js');

var _getUserPosition2 = _interopRequireDefault(_getUserPosition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getWeatherByCity() {
  var addr = _index.router.url.replace(/city\//, '');
  getLocationByCityName(addr).then(function (location) {
    _index.eventBus.trigger('getForecast', location);
  }).then(function (_) {
    _index.eventBus.trigger('historyWeather', addr);
  });
}

function getLocationByCityName(addr) {
  var GOOGLE_API_KEY = 'AIzaSyBLFkjFodoB1IjQYZXguwfBacB48EnvYKY';
  return fetch('https://maps.googleapis.com/maps/api/geocode/json?address=' + addr + '&key=' + GOOGLE_API_KEY).then(function (req) {
    if (req.status >= 200 && req.status < 300) {
      return Promise.resolve(req);
    } else {
      return Promise.reject(new Error(req.statusText));
    }
  }).then(function (req) {
    return req.json();
  }).then(function (data) {
    return data.results[0].geometry.location;
  }).catch(function (err) {
    console.log('Такой населенный пункт не найден', err);
    (0, _getUserPosition2.default)().then(function (url) {
      _index.eventBus.trigger('changeUrl', url);
    });
  });
}

},{"../index.js":11,"../weather/getUserPosition.js":19}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = searchCity;

var _changeUrl = require('../utils/changeUrl');

var _changeUrl2 = _interopRequireDefault(_changeUrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function searchCity() {
  document.querySelector('.search__img').addEventListener('click', setUrl);
  document.addEventListener('keypress', setUrl);
}

function setUrl(e) {
  if (e.which === 1 || e.charCode === 13) {
    var value = document.querySelector('.search__input').value;
    var url = 'city/' + value;
    (0, _changeUrl2.default)(url);
    document.querySelector('.search__input').value = '';
  }
}

},{"../utils/changeUrl":15}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventBus = function () {
  function EventBus() {
    _classCallCheck(this, EventBus);

    this.listeners = {};
  }

  _createClass(EventBus, [{
    key: "on",
    value: function on(eventName, cb) {
      if (!this.listeners[eventName]) {
        this.listeners[eventName] = [];
      }

      this.listeners[eventName].push(cb);
    }
  }, {
    key: "off",
    value: function off(eventName, cb) {
      this.listeners[eventName] = this.listeners[eventName] || [];
      this.listeners[eventName].splice(this.listeners[eventName].indexOf(cb), 1);
    }
  }, {
    key: "trigger",
    value: function trigger(eventName, data) {
      this.listeners[eventName] = this.listeners[eventName] || [];
      this.listeners[eventName].forEach(function (cb) {
        cb(data);
      });
    }
  }, {
    key: "once",
    value: function once(eventName, cb) {
      var func = function (data) {
        cb(data);
        this.off(eventName, func);
      }.bind(this);

      this.on(eventName, func);
    }
  }]);

  return EventBus;
}();

exports.default = EventBus;

},{}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = changeUrl;
function changeUrl(url) {
  window.location.hash = url;
}

},{}],16:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Router = function () {
  function Router(options) {
    var _this = this;

    _classCallCheck(this, Router);

    this.routes = options.routes || [];
    this.previosRoute;
    this.nextRoute;
    this.prev;
    this.next;
    this.EventBus = options.EventBus;

    this.handleUrl(window.location.hash);
    window.addEventListener('hashchange', function () {
      _this.handleUrl(window.location.hash);
    });
  }

  _createClass(Router, [{
    key: 'handleUrl',
    value: function handleUrl(url) {
      var _this2 = this;

      this.previosRoute = this.nextRoute;
      this.prev = this.next;
      this.url = url.replace(/#/, '');
      this.routes.forEach(function (el) {
        if (typeof el.match === 'string' && _this2.url === el.match) {
          _this2.nextRoute = url;
          _this2.next = el || {};
        } else if (typeof el.match === 'function' && el.match(_this2.url)) {
          _this2.nextRoute = _this2.url;
          _this2.next = el;
        } else if (el.match instanceof RegExp && decodeURI(_this2.url).search(el.match) !== -1) {
          _this2.url = decodeURI(_this2.url);
          _this2.nextRoute = _this2.url.match(el.match);
          _this2.nextRoute = _this2.nextRoute[0];
          _this2.next = el;
        }
      });
      if (this.previosRoute !== this.nextRoute) {
        Promise.resolve().then(function () {
          _this2.prev && _this2.prev.onLeave && _this2.prev.onLeave(_this2.previosRoute);
        }).then(function () {
          _this2.next && _this2.next.onBeforeEnter && _this2.next.onBeforeEnter(_this2.nextRoute);
        }).then(function () {
          _this2.next && _this2.next.onEnter && _this2.next.onEnter(_this2.nextRoute);
        });
      }
    }
  }]);

  return Router;
}();

exports.default = Router;

},{}],17:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = drawPageWeather;
function drawPageWeather(htmlEl) {
  htmlEl.innerHTML = '<div class="weather"><div class="weather__header"><div class="weather__settings settings"><label class="settings__label"><input type="radio" name="queries" value="xhr"><span>XHR</span></label><label class="settings__label"><input type="radio" name="queries" value="fetch" checked><span>fetch</span></label></div><div class="search__wrap"><input class="search__input" type="search"><?xml version="1.0" encoding="iso-8859-1"?>\n' + '<svg class="search__img" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px"\n' + '\t width="15px" height="15px" viewBox="0 0 485.213 485.213" style="enable-background:new 0 0 485.213 485.213; fill:#0D4510;"\n' + '\t xml:space="preserve">\n' + '\t<path d="M363.909,181.955C363.909,81.473,282.44,0,181.956,0C81.474,0,0.001,81.473,0.001,181.955s81.473,181.951,181.955,181.951\n' + '\tC282.44,363.906,363.909,282.437,363.909,181.955z M181.956,318.416c-75.252,0-136.465-61.208-136.465-136.46\n' + '\tc0-75.252,61.213-136.465,136.465-136.465c75.25,0,136.468,61.213,136.468,136.465\n' + '\tC318.424,257.208,257.206,318.416,181.956,318.416z"/>\n' + '\t<path d="M471.882,407.567L360.567,296.243c-16.586,25.795-38.536,47.734-64.331,64.321l111.324,111.324\n' + '\tc17.772,17.768,46.587,17.768,64.321,0C489.654,454.149,489.654,425.334,471.882,407.567z"/>\n' + '</svg></div><svg id ="star" class="star" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 426.667 426.667" style="enable-background:new 0 0 426.667 426.667;" xml:space="preserve"> +\n' + '\t<polygon style="fill:#ffe43e; stroke:#000; width:50px; height: 50px;" points="213.333,10.441 279.249,144.017 426.667,165.436 320,269.41 345.173,416.226 213.333,346.91   81.485,416.226 106.667,269.41 0,165.436 147.409,144.017 "/> +\n' + "\t'</svg></div>" + '<div class="weather__map" id="map"></div>' + '<div class="weather__footer">' + '<section id="history" class="block-info"><h2 class="block-info__title">История</h2><div class="block-info__wrap"></div></section><section id="weather" class="block-info"><h2 class="block-info__title">Погода</h2><div class="block-info__wrap  block-info__wrap--current-weather"></div></section><section id="favorites" class="block-info"><h2 class="block-info__title">Избранное</h2><div id="favorites-wrap" class="block-info__wrap"></div></section></div>' + '</div>';
}

},{}],18:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getForecastByLatLng;

var _loadMap = require('./loadMap.js');

var _loadMap2 = _interopRequireDefault(_loadMap);

var _index = require('./../index.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getForecastByLatLng(location) {
  var query = document.querySelector('input[type="radio"]:checked').value;
  (0, _loadMap2.default)('map', location);
  getForecastByRequest(location, query).then(function (data) {
    _index.eventBus.trigger('currentWeather', data);
  }).catch(function (err) {
    console.log(err);
  });
}

function getForecastByRequest(location, query) {
  var KEY_DARK_SKY = '9b4e68104fff62ae77dc24bc50f6706a';
  var lat = location.lat;
  var lng = location.lng;
  var url = 'https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/' + KEY_DARK_SKY + '/' + lat + ',' + lng + '?lang=ru&units=si';
  return query === 'xhr' ? getForecastByXHR(url) : getForecastByFetch(url);
}

function getForecastByXHR(url) {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', '' + url, true);
    xhr.onreadystatechange = function (_) {
      if (xhr.readyState !== 4) {
        return;
      }
      if (xhr.status !== 200) {
        reject('\u041E\u0448\u0438\u0431\u043A\u0430: ' + (xhr.status ? xhr.statusText : 'Прогноз погоды получить не удалось'));
      } else {
        resolve(JSON.parse(xhr.response));
      }
    };
    xhr.send();
  });
}

function getForecastByFetch(url) {
  return fetch('' + url).then(function (req) {
    if (req.status >= 200 && req.status < 300) {
      return Promise.resolve(req);
    } else {
      return Promise.reject(new Error(req.statusText));
    }
  }).then(function (req) {
    return req.json();
  }).catch(function (err) {
    return '\'\u041F\u0440\u043E\u0433\u043D\u043E\u0437 \u043F\u043E\u0433\u043E\u0434\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C \u043D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C\', ' + err;
  });
}

},{"./../index.js":11,"./loadMap.js":20}],19:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getUserPosition;
function getUserPosition() {
  var URL_API_USER_POSITION = 'https://api.userinfo.io/userinfos';
  return fetch('' + URL_API_USER_POSITION).then(function (response) {
    if (response.status >= 200 && response.status < 300) {
      return Promise.resolve(response);
    } else {
      return Promise.reject(new Error(response.statusText));
    }
  }).then(function (response) {
    return response.json();
  }).then(function (data) {
    var url = 'center=' + data.position.latitude + ',' + data.position.longitude;
    return url;
  }).catch(function (err) {
    console.log('Определить координаты пользователя не удалось', err);
    var url = 'center=55,30';
    return url; //дефолтное значение, если не ответа от API
  });
}

},{}],20:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = loadMap;

var _index = require('../index.js');

function loadMap(id, position) {
  var lat = position.lat,
      lng = position.lng;

  var map;

  if (document.querySelector('#map') && window.location.hash.match(/city/)) {
    document.querySelector('#map').innerHTML = '';
  }

  if (!document.querySelector('#map').childNodes.length) {
    ymaps.ready(init);
  }

  function init() {
    map = new ymaps.Map(id, {
      center: [lat, lng],
      zoom: 7,
      controls: ['zoomControl']
    });

    map.events.add('actionend', getNewCenter);

    function getNewCenter() {
      var newCenter = map.getCenter();
      var url = 'center=' + newCenter[0] + ',' + newCenter[1];
      _index.eventBus.trigger('changeUrl', url);
    }
  }
}

},{"../index.js":11}]},{},[11])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvYWJvdXQvYWJvdXQuanMiLCJzcmMvanMvYXV0aG9yL2F1dGhvci5qcyIsInNyYy9qcy9ibG9ja0N1cnJlbnRXZWF0aGVyL3dyaXRlQ3VycmVudFdlYXRoZXJCeUxvY2F0aW9uLmpzIiwic3JjL2pzL2Zhdm9yaXRlL2FkZEZhdm9yaXRlLmpzIiwic3JjL2pzL2Zhdm9yaXRlL2Fza05hbWVDaXR5LmpzIiwic3JjL2pzL2Zhdm9yaXRlL3JlbW92ZUZhdm9yaXRlLmpzIiwic3JjL2pzL2Zhdm9yaXRlL3N0b3JhZ2UuanMiLCJzcmMvanMvZmF2b3JpdGUvd3JpdGVBbGxTdG9yYWdlQ2l0aWVzLmpzIiwic3JjL2pzL2Zhdm9yaXRlL3dyaXRlRmF2b3JpdGVDaXR5RnJvbVN0b3JhZ2UuanMiLCJzcmMvanMvaGlzdG9yeS93cml0ZVdlYXRoZXJCeUhpc3RvcnkuanMiLCJzcmMvanMvaW5kZXguanMiLCJzcmMvanMvc2VhcmNoL2dldFdlYXRoZXJCeUNpdHkuanMiLCJzcmMvanMvc2VhcmNoL3NlYXJjaENpdHkuanMiLCJzcmMvanMvdXRpbHMvRXZlbnRCdXMuanMiLCJzcmMvanMvdXRpbHMvY2hhbmdlVXJsLmpzIiwic3JjL2pzL3V0aWxzL3JvdXRlci5qcyIsInNyYy9qcy93ZWF0aGVyL2RyYXdQYWdlV2VhdGhlci5qcyIsInNyYy9qcy93ZWF0aGVyL2dldEZvcmVjYXN0QnlMYXRMbmcuanMiLCJzcmMvanMvd2VhdGhlci9nZXRVc2VyUG9zaXRpb24uanMiLCJzcmMvanMvd2VhdGhlci9sb2FkTWFwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7a0JDQXdCLGE7QUFBVCxTQUFTLGFBQVQsQ0FBdUIsTUFBdkIsRUFBK0I7QUFDNUMsU0FBTyxTQUFQLEdBQ0Usc3NEQURGO0FBRUQ7Ozs7Ozs7O2tCQ0h1QixjO0FBQVQsU0FBUyxjQUFULENBQXdCLE1BQXhCLEVB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QUFjLEVBQWQsRUFBa0I7QUFDdEIsY0FBUSxDQUFDLEdBQUQsRUFBTSxHQUFOLENBRGM7QUFFdEIsWUFBTSxDQUZnQjtBQUd0QixnQkFBVSxDQUFDLGFBQUQ7QUFIWSxLQUFsQixDQUFOOztBQU1BLFFBQUksTUFBSixDQUFXLEdBQVgsQ0FBZSxXQUFmLEVBQTRCLFlBQTVCOztBQUVBLGFBQVMsWUFBVCxHQUF3QjtBQUN0QixVQUFJLFlBQVksSUFBSSxTQUFKLEVBQWhCO0FBQ0EsVUFBSSxrQkFBZ0IsVUFBVSxDQUFWLENBQWhCLFNBQWdDLFVBQVUsQ0FBVixDQUFwQztBQUNBLHNCQUFTLE9BQVQsQ0FBaUIsV0FBakIsRUFBOEIsR0FBOUI7QUFDRDtBQUNGO0FBQ0YiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkcmF3UGFnZUFib3V0KGh0bWxFbCkge1xyXG4gIGh0bWxFbC5pbm5lckhUTUwgPVxyXG4gICAgJzxoMiBjbGFzcz1cImRlc2NyaXB0aW9uX190aXRsZVwiPtCeINGB0LDQudGC0LUg0L/RgNC+0LPQvdC+0LfQsCDQv9C+0LPQvtC00Ys8L2gyPjxwIGNsYXNzPVwiZGVzY3JpcHRpb25fX3RleHRcIj7Qn9GA0Lgg0LLQstC+0LTQtSDRgtC10LrRgdGC0LAg0LIg0L/QvtC70LUg0LLQstC+0LTQsCDQuCDQvdCw0LbQsNGC0LjQuCDQutC90L7Qv9C60LggXCLQktCy0L7QtFwiICjQuNC70Lgg0L/QviDQutC70LjQutGDINC90LAg0LrQvdC+0L/QutC1IFwi0JjRgdC60LDRgtGMXCIpINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDQv9C+0L/QsNC00LDQtdGCINC90LAg0YHRgtGA0LDQvdC40YbRgyDRgSDQv9GA0L7Qs9C90L7Qt9C+0Lwg0L/QvtCz0L7QtNGLINCyINC30LDQtNCw0L3QvdC+0Lwg0LPQvtGA0L7QtNC1LiDQlNCw0L3QvdGL0Lkg0LPQvtGA0L7QtCDQvtGC0L7QsdGA0LDQttCw0LXRgtGB0Y8g0LIg0YbQtdC90YLRgNC1INC60LDRgNGC0YsuINCf0YDQuCDRjdGC0L7QvCDRgdGC0YDQsNC90LjRhtGDINC80L7QttC90L4g0LTQvtCx0LDQstC40YLRjCDQsiDQt9Cw0LrQu9Cw0LTQutC4INC40LvQuCDQvtGC0L/RgNCw0LLQuNGC0Ywg0YHQvtC+0LHRidC10L3QuNC10LwgLSDQv9GA0Lgg0L7RgtC60YDRi9GC0LjQuCDRgdGB0YvQu9C60Lgg0LTQvtC70LbQtdC9INC/0L7QutCw0LfQsNGC0YzRgdGPINGC0L7RgiDQttC1INCz0L7RgNC+0LQuPC9wPjxwIGNsYXNzPVwiZGVzY3JpcHRpb25fX3RleHRcIj7Qn9GA0Lgg0LjQt9C80LXQvdC10L3QuNC4INGG0LXQvdGC0YDQsCDQutCw0YDRgtGLICjQv9C10YDQtdGC0LDRgdC60LjQstCw0L3QuNC1IC8g0LfRg9C8KSDQvtGC0L7QsdGA0LDQttCw0Y7RgtGB0Y8g0LTQsNC90L3Ri9C1INC/0L4g0L/QvtCz0L7QtNC1INC00LvRjyDRhtC10L3RgtGA0LAg0LrQsNGA0YLRiy48L3A+PHAgY2xhc3M9XCJkZXNjcmlwdGlvbl9fdGV4dFwiPtCf0YDQuCDQv9C+0LjRgdC60LUg0LPQvtGA0L7QtNCwINC+0L0g0L/QvtGP0LLQu9GP0LXRgtGB0Y8g0LLQtdGA0YXQvdC40Lwg0L/Rg9C90LrRgtC+0Lwg0LIg0YHQv9C40YHQutC1INC/0L7RgdC70LXQtNC90LjRhSDQt9Cw0L/RgNC+0YHQvtCyICjQvdC40LbQvdC40Lkg0LHQu9C+0LogJiMxNzE70JjRgdGC0L7RgNC40Y8mIzE4NzspLCDQvtGB0YLQsNC70YzQvdGL0LUg0L/Rg9C90LrRgtGLINC+0L/Rg9GB0LrQsNGO0YLRgdGPINC90LAgMSDQstC90LjQty4g0J/Rg9C90LrRgtGLINGBINC90L7QvNC10YDQvtC8INCx0L7Qu9GM0YjQtSA1INC40YHRh9C10LfQsNGO0YIuPC9wPjxwIGNsYXNzPVwiZGVzY3JpcHRpb25fX3RleHRcIj7Qn9C+INC60LvQuNC60YMg0L3QsCDQt9Cy0LXQt9C00L7Rh9C60YMg0LPQvtGA0L7QtCwg0YDQsNGB0L/QvtC70L7QttC10L3QvdGL0Lkg0LIg0YbQtdC90YLRgNC1INC60LDRgNGC0YssINC00L7QsdCw0LLQu9GP0LXRgtGB0Y8g0LIg0YHQv9C40YHQvtC6ICYjMTcxO9CY0LfQsdGA0LDQvdC90L7QtSYjMTg3Oy4g0JjQtyDRgdC/0LjRgdC60LAg0LPQvtGA0L7QtCDQvNC+0LbQvdC+INGD0LTQsNC70LjRgtGMINGBINC/0L7QvNC+0YnRjNGOIHgg0LLQvtC30LvQtSDQt9Cw0L/QuNGB0LguINCf0YDQuCDQutC70LjQutC1INC90LAg0LfQsNC/0LjRgdGMINCyINGB0L/QuNGB0LrQtSAmIzE3MTvQmNC30LHRgNCw0L3QvdC+0LUmIzE4Nzsg0LjQu9C4ICYjMTcxO9CY0YHRgtC+0YDQuNGPJiMxODc7INC/0YDQvtC40YHRhdC+0LTQuNGCINC/0LXRgNC10YXQvtC0INC90LAg0YHQvtGF0YDQsNC90LXQvdC90YvQtSDQutC+0L7RgNC00LjQvdCw0YLRizwvcD48cCBjbGFzcz1cImRlc2NyaXB0aW9uX190ZXh0XCI+0KTRg9C90LrRhtC40Y8g0LfQsNCz0YDRg9C30LrQuCDQv9GA0L7Qs9C90L7Qt9CwINGA0LXQsNC70LjQt9C+0LLQsNC90LAg0LIg0LTQstGD0YUg0LLQsNGA0LjQsNC90YLQsNGFIC0g0YEg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LXQvCBmZXRjaCDQuCDRgSDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjQtdC8IFhIUiDQtNC70Y8g0LLRi9Cx0L7RgNCwINGC0LjQv9CwINGB0LvQtdC00YPRjtGJ0LXQs9C+INC30LDQv9GA0L7RgdCwLjwvcD48cCBjbGFzcz1cImRlc2NyaXB0aW9uX190ZXh0XCI+0JTQu9GPINC30LDQs9GA0YPQt9C60Lgg0L/RgNC+0LPQvdC+0LfQsCDQv9C+0LPQvtC00Ysg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQu9GB0Y8g0YHQsNC50YIgPGEgaHJlZj1cImh0dHBzOi8vZGFya3NreS5uZXQvXCI+ZGFya3NreTwvYT4uPC9wPjxwIGNsYXNzPVwiZGVzY3JpcHRpb25fX3RleHRcIj7QlNC70Y8g0L/QvtC70YPRh9C10L3QuNGPINC60L7QvtGA0LTQuNC90LDRgiDQv9C+INCy0LLQtdC00LXQvdC90YvQvCDQtNCw0L3QvdGL0Lwg0LjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPIEFQSSBHb29nbGUgTWFwcy48L3A+PHAgY2xhc3M9XCJkZXNjcmlwdGlvbl9fdGV4dFwiPtCf0YDQuCDQstGF0L7QtNC1INC90LAg0YHRgtGA0LDQvdC40YbRgyDRgdCw0LnRgiDQvtC/0YDQtdC00LXQu9GP0LXRgiDQvNC10YHRgtC+0L/QvtC70L7QttC10L3QuNC1INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQuCDQv9C10YDQtdC90LDQv9GA0LDQstC70Y/QtdGCINC90LAg0YHRgtGA0LDQvdC40YbRgyDRgSDRgdC+0L7RgtCy0LXRgtGB0LLRg9GO0YnQuNC80Lgg0LrQvtC+0YDQtNC40L3QsNGC0LDQvNC4LjwvcD48cCBjbGFzcz1cImRlc2NyaXB0aW9uX190ZXh0XCI+0J/QvtC00LTQtdGA0LbQuNCy0LDRjtGC0YHRjyDRgdGB0YvQu9C60Lgg0YEg0YPQutCw0LfQsNC90LjQtdC8INCz0L7RgNC+0LTQsCAo0L3QsNC/0YDQuNC80LXRgCAvY2l0eS9NaW5zaykuPC9wPic7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZHJhd1BhZ2VBdXRob3IoaHRtbEVsKSB7XHJcbiAgaHRtbEVsLmlubmVySFRNTCA9XHJcbiAgICAnPGgyIGNsYXNzPVwiZGVzY3JpcHRpb25fX3RpdGxlXCI+0JrQvtGA0L7RgtC60L4g0L7QsSDQsNCy0YLQvtGA0LU8L2gyPjxpbWcgY2xhc3M9XCJkZXNjcmlwdGlvbl9faW1nXCIgc3JjPVwiaW1nL2NhdC5qcGdcIiBhbHQ9XCLQutC+0YLRjVwiPjxwIGNsYXNzPVwiZGVzY3JpcHRpb25fX3RleHQgIGRlc2NyaXB0aW9uX190ZXh0LS1hdXRob3JcIj7QndCw0YLQsNGI0LAg0LzQvtC70L7QtNC10YYhPC9wPic7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd3JpdGVDdXJyZW50V2VhdGhlckJ5TG9jYXRpb24oZGF0YSkge1xyXG4gIGxldCBibG9ja0N1cnJlbnRXZWF0aGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3dlYXRoZXInKTtcclxuICBsZXQgaW5mbyA9IGJsb2NrQ3VycmVudFdlYXRoZXIucXVlcnlTZWxlY3RvcignLmJsb2NrLWluZm9fX3dyYXAnKTtcclxuICBsZXQgZGF0ZSA9IG5ldyBEYXRlKGRhdGEuY3VycmVudGx5LnRpbWUgKiAxMDAwKS50b0xvY2FsZVN0cmluZygncnUnLCB7XHJcbiAgICB5ZWFyOiAnbnVtZXJpYycsXHJcbiAgICBtb250aDogJ2xvbmcnLFxyXG4gICAgZGF5OiAnbnVtZXJpYycsXHJcbiAgICBob3VyOiAnbnVtZXJpYycsXHJcbiAgICBtaW51dGU6ICdudW1lcmljJ1xyXG4gIH0pO1xyXG4gIGxldCBjbG91ZENvdmVyID0gZGF0YS5jdXJyZW50bHkuc3VtbWFyeTtcclxuICBsZXQgaWNvbiA9IGRhdGEuY3VycmVudGx5Lmljb247XHJcbiAgbGV0IHRlbXAgPSBNYXRoLnJvdW5kKGRhdGEuY3VycmVudGx5LnRlbXBlcmF0dXJlKTtcclxuICBsZXQgc3BlZWQgPSBNYXRoLnJvdW5kKGRhdGEuY3VycmVudGx5LndpbmRTcGVlZCk7XHJcbiAgaW5mby5pbm5lckhUTUwgPSBgPHA+PHRpbWUgY2xhc3M9XCJibG9jay1pbmZvX190aW1lXCI+JHtkYXRlfTwvdGltZT48L3A+PHA+PHNwYW4gY2xhc3M9XCJibG9jay1pbmZvX19pbWctc2hvdy13ZWF0aGVyIGJsb2NrLWluZm9fX2ltZy1zaG93LXdlYXRoZXItLSR7aWNvbn1cIj48L3NwYW4+PHNwYW4+JHtjbG91ZENvdmVyfTwvc3Bhbj48L3A+PHA+PHNwYW4+JHt0ZW1wfSYjMTc2O0M8L3NwYW4+PC9wPjxwPtCh0LrQvtGA0L7RgdGC0Ywg0LLQtdGC0YDQsDogJHtzcGVlZH0g0Lwv0YE8L3A+YDtcclxufVxyXG4iLCJpbXBvcnQge3NldFN0b3JhZ2V9IGZyb20gJy4vc3RvcmFnZSc7XHJcbmltcG9ydCB7Z2V0U3RvcmFnZX0gZnJvbSAnLi9zdG9yYWdlJztcclxuaW1wb3J0IGFza05hbWVDaXR5IGZyb20gJy4vYXNrTmFtZUNpdHknO1xyXG5pbXBvcnQgd3JpdGVGYXZvcml0ZUNpdHlGcm9tU3RvcmFnZSBmcm9tICcuL3dyaXRlRmF2b3JpdGVDaXR5RnJvbVN0b3JhZ2UnO1xyXG5pbXBvcnQge3JvdXRlcn0gZnJvbSAnLi4vaW5kZXgnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkRmF2b3JpdGUoZSkge1xyXG5cdGlmIChyb3V0ZXIudXJsLm1hdGNoKC9jaXR5LykpIHtcclxuXHRcdHZhciBjaXR5ID0gcm91dGVyLnVybC5yZXBsYWNlKC9jaXR5XFwvLywgJycpO1xyXG5cdFx0dmFyIGFkZHIgPSByb3V0ZXIudXJsO1xyXG5cdFx0YWRkQ2l0eUJ5U3RvcmFnZShjaXR5LCBhZGRyKTtcclxuXHR9IGVsc2UgaWYgKHJvdXRlci51cmwubWF0Y2goL2NlbnRlci8pKSB7XHJcblx0XHRsZXQgcGFyRWwgPSBlLnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XHJcblx0XHRhc2tOYW1lQ2l0eShwYXJFbCk7XHJcblxyXG5cdFx0cGFyRWwucXVlcnlTZWxlY3RvcignI2NhbmNlbE5hbWUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF8gPT4ge1xyXG5cdFx0XHRwYXJFbC5xdWVyeVNlbGVjdG9yKCcjbW9kYWwnKS5yZW1vdmUoKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0cGFyRWwucXVlcnlTZWxlY3RvcignI2FkZE5hbWUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdGNpdHkgPSBwYXJFbC5xdWVyeVNlbGVjdG9yKCcjbW9kYWwtaW5wdXQnKS52YWx1ZTtcclxuXHRcdFx0cGFyRWwucXVlcnlTZWxlY3RvcignI21vZGFsJykucmVtb3ZlKCk7XHJcblx0XHRcdGFkZHIgPSByb3V0ZXIudXJsO1xyXG5cdFx0XHRhZGRDaXR5QnlTdG9yYWdlKGNpdHksIGFkZHIpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRDaXR5QnlTdG9yYWdlKGNpdHksIGFkZHIpIHtcclxuXHRnZXRTdG9yYWdlKGBjaXR5IC0gJHtjaXR5fWApXHJcblx0XHQudGhlbih2YWwgPT4ge1xyXG5cdFx0aWYgKCF2YWwpIHtcclxuXHRcdFx0bGV0IGZhdkNpdHlFbCA9IGA8bGkgY2xhc3M9XCJibG9jay1pbmZvX19pdGVtXCI+PGEgaHJlZj1cIiMke2FkZHJ9XCI+JHtjaXR5fTwvYT48YnV0dG9uIGRhdGEtY2xvc2U9XCIke2NpdHl9XCIgY2xhc3M9XCJjbG9zZSBidG5cIj48aW1nIGRhdGEtY2xvc2U9XCIke2NpdHl9XCIgc3JjPVwiaW1nL2Nsb3NlLnN2Z1wiPjwvYnV0dG9uPjwvbGk+YDtcclxuXHRcdFx0cmV0dXJuIGZhdkNpdHlFbDtcclxuXHRcdH1cclxuXHR9KVxyXG5cdFx0LnRoZW4oZWwgPT4ge1xyXG5cdFx0XHRzZXRTdG9yYWdlKGBjaXR5IC0gJHtjaXR5fWAsIGVsKVxyXG5cdFx0XHRcdC50aGVuKCBfID0+IHtcclxuXHRcdFx0XHRcdGdldFN0b3JhZ2UoYGNpdHkgLSAke2NpdHl9YClcclxuXHRcdFx0XHRcdFx0LnRoZW4oZWwgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdHdyaXRlRmF2b3JpdGVDaXR5RnJvbVN0b3JhZ2UoZWwpO1xyXG5cdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXNrTmFtZUNpdHkoaHRtbEVsKSB7XHJcblx0Y29uc29sZS5sb2coaHRtbEVsKTtcclxuXHR2YXIgbW9kYWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcblx0bW9kYWwuaWQgPSAnbW9kYWwnO1xyXG5cdG1vZGFsLmNsYXNzTGlzdCA9ICdtb2RhbCc7XHJcblx0bW9kYWwuaW5uZXJIVE1MID1cclxuXHRcdCc8bGFiZWw+PHAgY2xhc3M9XCJtb2RhbF9fdGV4dFwiPtCd0LDQv9C40YjQuNGC0LUg0L3QsNC30LLQsNC90LjQtSDQvdCw0YHQtdC70LXQvdC90L7Qs9C+INC/0YPQvdC60YLQsDo8L3A+PGlucHV0IGlkPVwibW9kYWwtaW5wdXRcIiBjbGFzcz1cIm1vZGFsX19pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgYXV0b2ZvY3VzPjwvbGFiZWw+PGRpdiBjbGFzcz1cIm1vZGFsX19idG4td3JhcFwiPjxidXR0b24gaWQ9XCJhZGROYW1lXCIgY2xhc3M9XCJtb2RhbF9fYnRuIGJ0blwiPtCT0L7RgtC+0LLQvjwvYnV0dG9uPjxidXR0b24gaWQ9XCJjYW5jZWxOYW1lXCIgY2xhc3M9XCJtb2RhbF9fYnRuIGJ0blwiPtCe0YLQvNC10L3QsDwvYnV0dG9uPjwvZGl2Pic7XHJcblx0aHRtbEVsLmFwcGVuZENoaWxkKG1vZGFsKTtcclxufSIsImltcG9ydCB7cmVtb3ZlRnJvbVN0b3JhZ2V9IGZyb20gXCIuL3N0b3JhZ2VcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZUZhdm9yaXRlKCkge1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmYXZvcml0ZXMnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgbGV0IGJsb2NrRmF2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Zhdm9yaXRlcycpO1xyXG4gICAgaWYgKGUudGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGF0YS1jbG9zZScpKSB7XHJcbiAgICAgIGlmIChibG9ja0Zhdi5xdWVyeVNlbGVjdG9yKCd1bCcpKSB7XHJcbiAgICAgICAgbGV0IGxpID0gZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgIGxldCB1bCA9IGxpLnBhcmVudE5vZGU7XHJcbiAgICAgICAgbGV0IGNpdHkgPSBsaS5xdWVyeVNlbGVjdG9yKCdhJykuaW5uZXJUZXh0O1xyXG4gICAgICAgIHJlbW92ZUZyb21TdG9yYWdlKGBjaXR5IC0gJHtjaXR5fWApLnRoZW4oIF8gPT4ge1xyXG4gICAgICAgICAgbGkucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgaWYgKCF1bC5jaGlsZE5vZGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB1bC5yZW1vdmUoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBnZXRTdG9yYWdlKGtleU5hbWUpIHtcclxuXHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5TmFtZSkpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFN0b3JhZ2Uoa2V5TmFtZSwgdmFsdWUpIHtcclxuXHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleU5hbWUsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsU3RvcmFnZSgpIHtcclxuXHRyZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcblx0XHR2YXIgc3RvcmFnZSA9ICcnO1xyXG5cdFx0dmFyIGtleXNTdG9yYWdlID0gW107XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0S2V5cygpIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbG9jYWxTdG9yYWdlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0XHR2YXIga2V5ID0gbG9jYWxTdG9yYWdlLmtleShpKTtcclxuXHRcdFx0XHRcdGlmIChrZXkubWF0Y2goL2NpdHkvKSkge1xyXG5cdFx0XHRcdFx0XHRrZXlzU3RvcmFnZS5wdXNoKGtleSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAoaSA9PT0gbG9jYWxTdG9yYWdlLmxlbmd0aCAtIDEpIHJlc29sdmUoa2V5c1N0b3JhZ2UpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHRcdH1cclxuXHJcblx0XHRnZXRLZXlzKClcclxuXHRcdFx0LnRoZW4oa2V5U3RvcmFnZSA9PiB7XHJcblx0XHRcdFx0a2V5U3RvcmFnZS5mb3JFYWNoKChrZXksIGkpID0+IHtcclxuXHRcdFx0XHRcdGdldFN0b3JhZ2Uoa2V5KVxyXG5cdFx0XHRcdFx0XHQudGhlbih2YWx1ZSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0c3RvcmFnZSArPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoaSA9PT0ga2V5U3RvcmFnZS5sZW5ndGggLSAxKSByZXNvbHZlKHN0b3JhZ2UpO1xyXG5cdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KTtcclxuXHR9KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRnJvbVN0b3JhZ2Uoa2V5TmFtZSkge1xyXG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUobG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5TmFtZSkpO1xyXG59XHJcbiIsImltcG9ydCB7Z2V0QWxsU3RvcmFnZX0gZnJvbSAnLi9zdG9yYWdlJztcclxuaW1wb3J0IHdyaXRlRmF2b3JpdGVDaXR5RnJvbVN0b3JhZ2UgZnJvbSAnLi93cml0ZUZhdm9yaXRlQ2l0eUZyb21TdG9yYWdlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdyaXRlQWxsU3RvcmFnZUNpdGllcygpIHtcclxuXHRnZXRBbGxTdG9yYWdlKClcclxuXHRcdC50aGVuKGRhdGEgPT4ge1xyXG5cdFx0XHR3cml0ZUZhdm9yaXRlQ2l0eUZyb21TdG9yYWdlKGRhdGEpO1xyXG5cdFx0fSk7XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3cml0ZUZhdm9yaXRlQ2l0eUZyb21TdG9yYWdlKGVsKSB7XHJcblx0bGV0IGJsb2NrSW5mbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmYXZvcml0ZXMtd3JhcCcpO1xyXG5cclxuXHRpZiAoIWJsb2NrSW5mby5xdWVyeVNlbGVjdG9yKCd1bCcpKSB7XHJcblx0XHR2YXIgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xyXG5cdFx0YmxvY2tJbmZvLmFwcGVuZENoaWxkKHVsKTtcclxuXHRcdHVsLmNsYXNzTGlzdC5hZGQoJ2Jsb2NrLWluZm9fX2xpc3QnKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0dWwgPSBibG9ja0luZm8ucXVlcnlTZWxlY3RvcigndWwnKTtcclxuXHR9XHJcblx0dWwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgZWwpO1xyXG5cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3cml0ZVdlYXRoZXJCeUhpc3RvcnkoY2l0eSkge1xyXG4gIGxldCBjaXR5TmFtZSA9IGRlY29kZVVSSShjaXR5KTtcclxuICBsZXQgaGlzdG9yeUJsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2hpc3RvcnknKTtcclxuICBsZXQgaGlzdG9yeUluZm8gPSBoaXN0b3J5QmxvY2sucXVlcnlTZWxlY3RvcignLmJsb2NrLWluZm9fX3dyYXAnKTtcclxuXHJcbiAgaWYgKCFoaXN0b3J5SW5mby5xdWVyeVNlbGVjdG9yKCd1bCcpKSB7XHJcbiAgICBoaXN0b3J5SW5mby5pbm5lckhUTUwgPSAnPHVsPjwvdWw+JztcclxuICB9XHJcblxyXG4gIGxldCBsaXN0ID0gaGlzdG9yeUluZm8ucXVlcnlTZWxlY3RvcigndWwnKTtcclxuICBsZXQgY2l0eUl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG4gIGNpdHlJdGVtLmlubmVySFRNTCA9IGA8bGk+PGEgaHJlZj1cIiNjaXR5LyR7Y2l0eU5hbWV9XCI+JHtjaXR5TmFtZX08L2E+PC9saT5gO1xyXG4gIGxpc3QuaW5zZXJ0QWRqYWNlbnRIVE1MKFxyXG4gICAgJ2FmdGVyYmVnaW4nLFxyXG4gICAgYDxsaT48YSBocmVmPVwiI2NpdHkvJHtjaXR5TmFtZX1cIj4ke2NpdHlOYW1lfTwvYT48L2xpPmBcclxuICApO1xyXG5cclxuICB2YXIgaXRlbXMgPSBsaXN0LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyk7XHJcbiAgaWYgKGl0ZW1zLmxlbmd0aCA+IDUpIHtcclxuICAgIGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdLnJlbW92ZSgpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgRXZlbnRCdXMgZnJvbSAnLi91dGlscy9FdmVudEJ1cy5qcyc7XHJcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi91dGlscy9yb3V0ZXIuanMnO1xyXG5pbXBvcnQgY2hhbmdlVXJsIGZyb20gJy4vdXRpbHMvY2hhbmdlVXJsLmpzJztcclxuaW1wb3J0IGRyYXdQYWdlV2VhdGhlciBmcm9tICcuL3dlYXRoZXIvZHJhd1BhZ2VXZWF0aGVyLmpzJztcclxuaW1wb3J0IGdldEZvcmVjYXN0QnlMYXRMbmcgZnJvbSAnLi93ZWF0aGVyL2dldEZvcmVjYXN0QnlMYXRMbmcuanMnO1xyXG5pbXBvcnQgZHJhd1BhZ2VBdXRob3IgZnJvbSAnLi9hdXRob3IvYXV0aG9yLmpzJztcclxuaW1wb3J0IGRyYXdQYWdlQWJvdXQgZnJvbSAnLi9hYm91dC9hYm91dC5qcyc7XHJcbmltcG9ydCBnZXRVc2VyUG9zaXRpb24gZnJvbSAnLi93ZWF0aGVyL2dldFVzZXJQb3NpdGlvbi5qcyc7XHJcbmltcG9ydCB3cml0ZUN1cnJlbnRXZWF0aGVyQnlMb2NhdGlvbiBmcm9tICcuL2Jsb2NrQ3VycmVudFdlYXRoZXIvd3JpdGVDdXJyZW50V2VhdGhlckJ5TG9jYXRpb24uanMnO1xyXG5pbXBvcnQgd3JpdGVXZWF0aGVyQnlIaXN0b3J5IGZyb20gJy4vaGlzdG9yeS93cml0ZVdlYXRoZXJCeUhpc3RvcnkuanMnO1xyXG5pbXBvcnQgc2VhcmNoQ2l0eSBmcm9tICcuL3NlYXJjaC9zZWFyY2hDaXR5LmpzJztcclxuaW1wb3J0IGdldFdlYXRoZXJCeUNpdHkgZnJvbSAnLi9zZWFyY2gvZ2V0V2VhdGhlckJ5Q2l0eS5qcyc7XHJcbmltcG9ydCBhZGRGYXZvcml0ZSBmcm9tICcuL2Zhdm9yaXRlL2FkZEZhdm9yaXRlLmpzJztcclxuaW1wb3J0IHdyaXRlRmF2b3JpdGVDaXR5RnJvbVN0b3JhZ2UgZnJvbSAnLi9mYXZvcml0ZS93cml0ZUZhdm9yaXRlQ2l0eUZyb21TdG9yYWdlLmpzJztcclxuaW1wb3J0IHdyaXRlQWxsU3RvcmFnZUNpdGllcyBmcm9tIFwiLi9mYXZvcml0ZS93cml0ZUFsbFN0b3JhZ2VDaXRpZXNcIjtcclxuaW1wb3J0IHJlbW92ZUZhdm9yaXRlIGZyb20gJy4vZmF2b3JpdGUvcmVtb3ZlRmF2b3JpdGUnO1xyXG5cclxuY29uc3QgbWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYWluJyk7XHJcbmNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XHJcblxyXG5leHBvcnQgY29uc3QgZXZlbnRCdXMgPSBuZXcgRXZlbnRCdXMoKTtcclxuXHJcbmV2ZW50QnVzLm9uKCdhdXRob3InLCBkcmF3UGFnZUF1dGhvcik7XHJcbmV2ZW50QnVzLm9uKCdhYm91dCcsIGRyYXdQYWdlQWJvdXQpO1xyXG5ldmVudEJ1cy5vbignaW5pdCcsIGRyYXdQYWdlV2VhdGhlcik7XHJcbmV2ZW50QnVzLm9uKCdjaGFuZ2VVcmwnLCBjaGFuZ2VVcmwpO1xyXG5ldmVudEJ1cy5vbignZ2V0Rm9yZWNhc3QnLCBnZXRGb3JlY2FzdEJ5TGF0TG5nKTtcclxuZXZlbnRCdXMub24oJ2N1cnJlbnRXZWF0aGVyJywgd3JpdGVDdXJyZW50V2VhdGhlckJ5TG9jYXRpb24pO1xyXG5ldmVudEJ1cy5vbignaGlzdG9yeVdlYXRoZXInLCB3cml0ZVdlYXRoZXJCeUhpc3RvcnkpO1xyXG5ldmVudEJ1cy5vbmNlKCdzZWFyY2hDaXR5Jywgc2VhcmNoQ2l0eSk7XHJcbmV2ZW50QnVzLm9uKCdnZXRXZWF0aGVyQnlDaXR5JywgZ2V0V2VhdGhlckJ5Q2l0eSk7XHJcbmV2ZW50QnVzLm9uKCd3cml0ZUFsbFN0b3JhZ2VDaXRpZXMnLCB3cml0ZUFsbFN0b3JhZ2VDaXRpZXMpO1xyXG5ldmVudEJ1cy5vbignd3JpdGVTdG9yYWdlQnlGYXZvcml0ZUJsb2NrJywgd3JpdGVGYXZvcml0ZUNpdHlGcm9tU3RvcmFnZSk7XHJcbmV2ZW50QnVzLm9uY2UoJ3JlbW92ZUZhdm9yaXRlJywgcmVtb3ZlRmF2b3JpdGUpO1xyXG5cclxuZXhwb3J0IHZhciByb3V0ZXIgPSBuZXcgUm91dGVyKHtcclxuICByb3V0ZXM6IFtcclxuICAgIHtcclxuICAgICAgbmFtZTogJ2luZGV4JyxcclxuICAgICAgbWF0Y2g6ICcnLFxyXG4gICAgICBvbkVudGVyOiAoKSA9PiB7XHJcbiAgICAgICAgZXZlbnRCdXMudHJpZ2dlcignaW5pdCcsIG1haW4pO1xyXG4gICAgICAgIGdldFVzZXJQb3NpdGlvbigpXHJcbiAgICAgICAgICAudGhlbih1cmwgPT4ge1xyXG4gICAgICAgICAgICBldmVudEJ1cy50cmlnZ2VyKCdjaGFuZ2VVcmwnLCB1cmwpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaCh1cmwgPT4ge1xyXG4gICAgICAgICAgICBldmVudEJ1cy50cmlnZ2VyKCdjaGFuZ2VVcmwnLCB1cmwpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgc2VhcmNoQ2l0eSgpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiAnd2VhdGhlcicsXHJcbiAgICAgIG1hdGNoOiAvY2VudGVyPVxcZCtcXC4qXFxkKixcXGQrXFwuKlxcZCovLFxyXG5cdFx0XHRvbkJlZm9yZUVudGVyOiAoKSA9PiB7XHJcblx0XHRcdFx0ZXZlbnRCdXMub24oJ2FkZEZhdm9yaXRlJywgYWRkRmF2b3JpdGUpO1xyXG5cdFx0XHR9LFxyXG5cclxuICAgICAgb25FbnRlcjogKCkgPT4ge1xyXG4gICAgICAgIGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xyXG4gICAgICAgIGxldCBsb2NhdGlvbiA9IHVybC5tYXRjaCgvXFxkK1xcLipcXGQqL2cpO1xyXG4gICAgICAgIGxldCBsYXQgPSArbG9jYXRpb25bMF07XHJcbiAgICAgICAgbGV0IGxuZyA9ICtsb2NhdGlvblsxXTtcclxuXHJcbiAgICAgICAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud2VhdGhlcicpKSB7XHJcbiAgICAgICAgICBldmVudEJ1cy50cmlnZ2VyKCdpbml0JywgbWFpbik7XHJcbiAgICAgICAgICBldmVudEJ1cy50cmlnZ2VyKCdzZWFyY2hDaXR5Jyk7XHJcbiAgICAgICAgICBldmVudEJ1cy50cmlnZ2VyKCd3cml0ZUFsbFN0b3JhZ2VDaXRpZXMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV2ZW50QnVzLnRyaWdnZXIoJ2dldEZvcmVjYXN0JywgeyBsYXQ6IGxhdCwgbG5nOiBsbmcgfSk7XHJcbiAgICAgICAgZXZlbnRCdXMudHJpZ2dlcigncmVtb3ZlRmF2b3JpdGUnKTtcclxuXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N0YXInKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFkZEZhdm9yaXRlKTtcclxuICAgICAgfSxcclxuXHJcblx0XHRcdG9uTGVhdmU6ICgpID0+IHtcclxuXHRcdFx0XHRldmVudEJ1cy5vZmYoJ2FkZEZhdm9yaXRlJyk7XHJcblx0XHRcdH1cclxuICAgIH0sXHJcblxyXG4gICAge1xyXG4gICAgICBuYW1lOiAnY2l0eScsXHJcbiAgICAgIG1hdGNoOiAvY2l0eVxcL1tcXHfQsC3Rj10rL2ksXHJcblx0XHRcdG9uQmVmb3JlRW50ZXI6ICgpID0+IHtcclxuXHRcdFx0XHRldmVudEJ1cy5vbignYWRkRmF2b3JpdGUnLCBhZGRGYXZvcml0ZSk7XHJcblx0XHRcdH0sXHJcblxyXG4gICAgICBvbkVudGVyOiAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGNpdHkgPSByb3V0ZXIudXJsLnJlcGxhY2UoJ2NpdHkvJywgJycpO1xyXG5cclxuICAgICAgICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53ZWF0aGVyJykpIHtcclxuICAgICAgICAgIGV2ZW50QnVzLnRyaWdnZXIoJ2luaXQnLCBtYWluKTtcclxuICAgICAgICAgIGV2ZW50QnVzLnRyaWdnZXIoJ3NlYXJjaENpdHknKTtcclxuXHRcdFx0XHRcdGV2ZW50QnVzLnRyaWdnZXIoJ3dyaXRlQWxsU3RvcmFnZUNpdGllcycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBldmVudEJ1cy50cmlnZ2VyKCdnZXRXZWF0aGVyQnlDaXR5JywgY2l0eSk7XHJcbiAgICAgICAgZXZlbnRCdXMudHJpZ2dlcigncmVtb3ZlRmF2b3JpdGUnKTtcclxuXHRcdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3RhcicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYWRkRmF2b3JpdGUpO1xyXG4gICAgICB9LFxyXG5cclxuXHRcdFx0b25MZWF2ZTogKCkgPT4ge1xyXG5cdFx0XHRcdGV2ZW50QnVzLm9mZignYWRkRmF2b3JpdGUnKTtcclxuXHRcdFx0fVxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdhYm91dCcsXHJcbiAgICAgIG1hdGNoOiAnYWJvdXQnLFxyXG4gICAgICBvbkVudGVyOiAoKSA9PiB7XHJcbiAgICAgICAgZXZlbnRCdXMudHJpZ2dlcignYWJvdXQnLCBtYWluKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogJ2F1dGhvcicsXHJcbiAgICAgIG1hdGNoOiAnYXV0aG9yJyxcclxuICAgICAgb25FbnRlcjogKCkgPT4ge1xyXG4gICAgICAgIGV2ZW50QnVzLnRyaWdnZXIoJ2F1dGhvcicsIG1haW4pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgXVxyXG59KTtcclxuIiwiaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICcuLi9pbmRleC5qcyc7XHJcbmltcG9ydCB7cm91dGVyfSBmcm9tICcuLi9pbmRleC5qcyc7XHJcbmltcG9ydCBnZXRVc2VyUG9zaXRpb24gZnJvbSAnLi4vd2VhdGhlci9nZXRVc2VyUG9zaXRpb24uanMnO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdlYXRoZXJCeUNpdHkoKSB7XHJcblx0bGV0IGFkZHIgPSByb3V0ZXIudXJsLnJlcGxhY2UoL2NpdHlcXC8vLCAnJyk7XHJcblx0Z2V0TG9jYXRpb25CeUNpdHlOYW1lKGFkZHIpXHJcblx0XHQudGhlbihsb2NhdGlvbiA9PiB7XHJcblx0XHRldmVudEJ1cy50cmlnZ2VyKCdnZXRGb3JlY2FzdCcsIGxvY2F0aW9uKTtcclxuXHR9KVxyXG5cdFx0LnRoZW4oXyA9PiB7XHJcblx0XHRcdGV2ZW50QnVzLnRyaWdnZXIoJ2hpc3RvcnlXZWF0aGVyJywgYWRkcik7XHJcblx0XHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TG9jYXRpb25CeUNpdHlOYW1lKGFkZHIpIHtcclxuICBjb25zdCBHT09HTEVfQVBJX0tFWSA9ICdBSXphU3lCTEZrakZvZG9CMUlqUVlaWGd1d2ZCYWNCNDhFbnZZS1knO1xyXG4gIHJldHVybiBmZXRjaChcclxuICAgIGBodHRwczovL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvZ2VvY29kZS9qc29uP2FkZHJlc3M9JHthZGRyfSZrZXk9JHtHT09HTEVfQVBJX0tFWX1gXHJcbiAgKVxyXG4gICAgLnRoZW4ocmVxID0+IHtcclxuICAgICAgaWYgKHJlcS5zdGF0dXMgPj0gMjAwICYmIHJlcS5zdGF0dXMgPCAzMDApIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlcSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihyZXEuc3RhdHVzVGV4dCkpO1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgLnRoZW4ocmVxID0+IHJlcS5qc29uKCkpXHJcbiAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgcmV0dXJuIGRhdGEucmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbjtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ9Ci0LDQutC+0Lkg0L3QsNGB0LXQu9C10L3QvdGL0Lkg0L/Rg9C90LrRgiDQvdC1INC90LDQudC00LXQvScsIGVycik7XHJcbiAgICAgIGdldFVzZXJQb3NpdGlvbigpLnRoZW4odXJsID0+IHtcclxuICAgICAgICBldmVudEJ1cy50cmlnZ2VyKCdjaGFuZ2VVcmwnLCB1cmwpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCBjaGFuZ2VVcmwgZnJvbSAnLi4vdXRpbHMvY2hhbmdlVXJsJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNlYXJjaENpdHkoKSB7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlYXJjaF9faW1nJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzZXRVcmwpO1xyXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgc2V0VXJsKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0VXJsKGUpIHtcclxuICBpZiAoZS53aGljaCA9PT0gMSB8fCBlLmNoYXJDb2RlID09PSAxMykge1xyXG4gICAgbGV0IHZhbHVlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlYXJjaF9faW5wdXQnKS52YWx1ZTtcclxuICAgIGxldCB1cmwgPSBgY2l0eS8ke3ZhbHVlfWA7XHJcbiAgICBjaGFuZ2VVcmwodXJsKTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2hfX2lucHV0JykudmFsdWUgPSAnJztcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRCdXMge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5saXN0ZW5lcnMgPSB7fTtcclxuICB9XHJcblxyXG4gIG9uKGV2ZW50TmFtZSwgY2IpIHtcclxuICAgIGlmICghdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXSkge1xyXG4gICAgICB0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXS5wdXNoKGNiKTtcclxuICB9XHJcblxyXG4gIG9mZihldmVudE5hbWUsIGNiKSB7XHJcblx0XHR0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdID0gdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXSB8fCBbXTtcclxuXHRcdHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0uc3BsaWNlKFxyXG5cdFx0XHR0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdLmluZGV4T2YoY2IpLFxyXG5cdFx0XHQxXHJcblx0XHQpO1xyXG5cclxuICB9XHJcblxyXG4gIHRyaWdnZXIoZXZlbnROYW1lLCBkYXRhKSB7XHJcblx0XHR0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdID0gdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXSB8fCBbXTtcclxuXHRcdHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0uZm9yRWFjaChjYiA9PiB7XHJcblx0XHRcdGNiKGRhdGEpO1xyXG5cdFx0fSk7XHJcbiAgfVxyXG5cclxuICBvbmNlKGV2ZW50TmFtZSwgY2IpIHtcclxuICAgIGxldCBmdW5jID0gZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICBjYihkYXRhKTtcclxuICAgICAgdGhpcy5vZmYoZXZlbnROYW1lLCBmdW5jKTtcclxuICAgIH0uYmluZCh0aGlzKTtcclxuXHJcbiAgICB0aGlzLm9uKGV2ZW50TmFtZSwgZnVuYyk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNoYW5nZVVybCh1cmwpIHtcclxuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHVybDtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBSb3V0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgIHRoaXMucm91dGVzID0gb3B0aW9ucy5yb3V0ZXMgfHwgW107XHJcbiAgICB0aGlzLnByZXZpb3NSb3V0ZTtcclxuICAgIHRoaXMubmV4dFJvdXRlO1xyXG4gICAgdGhpcy5wcmV2O1xyXG4gICAgdGhpcy5uZXh0O1xyXG4gICAgdGhpcy5FdmVudEJ1cyA9IG9wdGlvbnMuRXZlbnRCdXM7XHJcblxyXG4gICAgdGhpcy5oYW5kbGVVcmwod2luZG93LmxvY2F0aW9uLmhhc2gpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuaGFuZGxlVXJsKHdpbmRvdy5sb2NhdGlvbi5oYXNoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlVXJsKHVybCkge1xyXG4gICAgdGhpcy5wcmV2aW9zUm91dGUgPSB0aGlzLm5leHRSb3V0ZTtcclxuICAgIHRoaXMucHJldiA9IHRoaXMubmV4dDtcclxuICAgIHRoaXMudXJsID0gdXJsLnJlcGxhY2UoLyMvLCAnJyk7XHJcbiAgICB0aGlzLnJvdXRlcy5mb3JFYWNoKGVsID0+IHtcclxuICAgICAgaWYgKHR5cGVvZiBlbC5tYXRjaCA9PT0gJ3N0cmluZycgJiYgdGhpcy51cmwgPT09IGVsLm1hdGNoKSB7XHJcbiAgICAgICAgdGhpcy5uZXh0Um91dGUgPSB1cmw7XHJcbiAgICAgICAgdGhpcy5uZXh0ID0gZWwgfHwge307XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGVsLm1hdGNoID09PSAnZnVuY3Rpb24nICYmIGVsLm1hdGNoKHRoaXMudXJsKSkge1xyXG4gICAgICAgIHRoaXMubmV4dFJvdXRlID0gdGhpcy51cmw7XHJcbiAgICAgICAgdGhpcy5uZXh0ID0gZWw7XHJcbiAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgZWwubWF0Y2ggaW5zdGFuY2VvZiBSZWdFeHAgJiZcclxuICAgICAgICBkZWNvZGVVUkkodGhpcy51cmwpLnNlYXJjaChlbC5tYXRjaCkgIT09IC0xXHJcbiAgICAgICkge1xyXG4gICAgICAgIHRoaXMudXJsID0gZGVjb2RlVVJJKHRoaXMudXJsKTtcclxuICAgICAgICB0aGlzLm5leHRSb3V0ZSA9IHRoaXMudXJsLm1hdGNoKGVsLm1hdGNoKTtcclxuICAgICAgICB0aGlzLm5leHRSb3V0ZSA9IHRoaXMubmV4dFJvdXRlWzBdO1xyXG4gICAgICAgIHRoaXMubmV4dCA9IGVsO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGlmICh0aGlzLnByZXZpb3NSb3V0ZSAhPT0gdGhpcy5uZXh0Um91dGUpIHtcclxuICAgICAgUHJvbWlzZS5yZXNvbHZlKClcclxuICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnByZXYgJiZcclxuICAgICAgICAgICAgdGhpcy5wcmV2Lm9uTGVhdmUgJiZcclxuICAgICAgICAgICAgdGhpcy5wcmV2Lm9uTGVhdmUodGhpcy5wcmV2aW9zUm91dGUpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5uZXh0ICYmXHJcbiAgICAgICAgICAgIHRoaXMubmV4dC5vbkJlZm9yZUVudGVyICYmXHJcbiAgICAgICAgICAgIHRoaXMubmV4dC5vbkJlZm9yZUVudGVyKHRoaXMubmV4dFJvdXRlKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgIHRoaXMubmV4dCAmJiB0aGlzLm5leHQub25FbnRlciAmJiB0aGlzLm5leHQub25FbnRlcih0aGlzLm5leHRSb3V0ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRyYXdQYWdlV2VhdGhlcihodG1sRWwpIHtcclxuICBodG1sRWwuaW5uZXJIVE1MID1cclxuICAgICc8ZGl2IGNsYXNzPVwid2VhdGhlclwiPjxkaXYgY2xhc3M9XCJ3ZWF0aGVyX19oZWFkZXJcIj48ZGl2IGNsYXNzPVwid2VhdGhlcl9fc2V0dGluZ3Mgc2V0dGluZ3NcIj48bGFiZWwgY2xhc3M9XCJzZXR0aW5nc19fbGFiZWxcIj48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInF1ZXJpZXNcIiB2YWx1ZT1cInhoclwiPjxzcGFuPlhIUjwvc3Bhbj48L2xhYmVsPjxsYWJlbCBjbGFzcz1cInNldHRpbmdzX19sYWJlbFwiPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwicXVlcmllc1wiIHZhbHVlPVwiZmV0Y2hcIiBjaGVja2VkPjxzcGFuPmZldGNoPC9zcGFuPjwvbGFiZWw+PC9kaXY+PGRpdiBjbGFzcz1cInNlYXJjaF9fd3JhcFwiPjxpbnB1dCBjbGFzcz1cInNlYXJjaF9faW5wdXRcIiB0eXBlPVwic2VhcmNoXCI+PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiaXNvLTg4NTktMVwiPz5cXG4nICtcclxuICAgICc8c3ZnIGNsYXNzPVwic2VhcmNoX19pbWdcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeD1cIjBweFwiIHk9XCIwcHhcIlxcbicgK1xyXG4gICAgJ1xcdCB3aWR0aD1cIjE1cHhcIiBoZWlnaHQ9XCIxNXB4XCIgdmlld0JveD1cIjAgMCA0ODUuMjEzIDQ4NS4yMTNcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgNDg1LjIxMyA0ODUuMjEzOyBmaWxsOiMwRDQ1MTA7XCJcXG4nICtcclxuICAgICdcXHQgeG1sOnNwYWNlPVwicHJlc2VydmVcIj5cXG4nICtcclxuICAgICdcXHQ8cGF0aCBkPVwiTTM2My45MDksMTgxLjk1NUMzNjMuOTA5LDgxLjQ3MywyODIuNDQsMCwxODEuOTU2LDBDODEuNDc0LDAsMC4wMDEsODEuNDczLDAuMDAxLDE4MS45NTVzODEuNDczLDE4MS45NTEsMTgxLjk1NSwxODEuOTUxXFxuJyArXHJcbiAgICAnXFx0QzI4Mi40NCwzNjMuOTA2LDM2My45MDksMjgyLjQzNywzNjMuOTA5LDE4MS45NTV6IE0xODEuOTU2LDMxOC40MTZjLTc1LjI1MiwwLTEzNi40NjUtNjEuMjA4LTEzNi40NjUtMTM2LjQ2XFxuJyArXHJcbiAgICAnXFx0YzAtNzUuMjUyLDYxLjIxMy0xMzYuNDY1LDEzNi40NjUtMTM2LjQ2NWM3NS4yNSwwLDEzNi40NjgsNjEuMjEzLDEzNi40NjgsMTM2LjQ2NVxcbicgK1xyXG4gICAgJ1xcdEMzMTguNDI0LDI1Ny4yMDgsMjU3LjIwNiwzMTguNDE2LDE4MS45NTYsMzE4LjQxNnpcIi8+XFxuJyArXHJcbiAgICAnXFx0PHBhdGggZD1cIk00NzEuODgyLDQwNy41NjdMMzYwLjU2NywyOTYuMjQzYy0xNi41ODYsMjUuNzk1LTM4LjUzNiw0Ny43MzQtNjQuMzMxLDY0LjMyMWwxMTEuMzI0LDExMS4zMjRcXG4nICtcclxuICAgICdcXHRjMTcuNzcyLDE3Ljc2OCw0Ni41ODcsMTcuNzY4LDY0LjMyMSwwQzQ4OS42NTQsNDU0LjE0OSw0ODkuNjU0LDQyNS4zMzQsNDcxLjg4Miw0MDcuNTY3elwiLz5cXG4nICtcclxuICAgICc8L3N2Zz48L2Rpdj48c3ZnIGlkID1cInN0YXJcIiBjbGFzcz1cInN0YXJcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDQyNi42NjcgNDI2LjY2N1wiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCA0MjYuNjY3IDQyNi42Njc7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj4gK1xcbicgK1xyXG4gICAgJ1xcdDxwb2x5Z29uIHN0eWxlPVwiZmlsbDojZmZlNDNlOyBzdHJva2U6IzAwMDsgd2lkdGg6NTBweDsgaGVpZ2h0OiA1MHB4O1wiIHBvaW50cz1cIjIxMy4zMzMsMTAuNDQxIDI3OS4yNDksMTQ0LjAxNyA0MjYuNjY3LDE2NS40MzYgMzIwLDI2OS40MSAzNDUuMTczLDQxNi4yMjYgMjEzLjMzMywzNDYuOTEgICA4MS40ODUsNDE2LjIyNiAxMDYuNjY3LDI2OS40MSAwLDE2NS40MzYgMTQ3LjQwOSwxNDQuMDE3IFwiLz4gK1xcbicgK1xyXG4gICAgXCJcXHQnPC9zdmc+PC9kaXY+XCIgK1xyXG4gICAgJzxkaXYgY2xhc3M9XCJ3ZWF0aGVyX19tYXBcIiBpZD1cIm1hcFwiPjwvZGl2PicgK1xyXG4gICAgJzxkaXYgY2xhc3M9XCJ3ZWF0aGVyX19mb290ZXJcIj4nICtcclxuICAgICc8c2VjdGlvbiBpZD1cImhpc3RvcnlcIiBjbGFzcz1cImJsb2NrLWluZm9cIj48aDIgY2xhc3M9XCJibG9jay1pbmZvX190aXRsZVwiPtCY0YHRgtC+0YDQuNGPPC9oMj48ZGl2IGNsYXNzPVwiYmxvY2staW5mb19fd3JhcFwiPjwvZGl2Pjwvc2VjdGlvbj48c2VjdGlvbiBpZD1cIndlYXRoZXJcIiBjbGFzcz1cImJsb2NrLWluZm9cIj48aDIgY2xhc3M9XCJibG9jay1pbmZvX190aXRsZVwiPtCf0L7Qs9C+0LTQsDwvaDI+PGRpdiBjbGFzcz1cImJsb2NrLWluZm9fX3dyYXAgIGJsb2NrLWluZm9fX3dyYXAtLWN1cnJlbnQtd2VhdGhlclwiPjwvZGl2Pjwvc2VjdGlvbj48c2VjdGlvbiBpZD1cImZhdm9yaXRlc1wiIGNsYXNzPVwiYmxvY2staW5mb1wiPjxoMiBjbGFzcz1cImJsb2NrLWluZm9fX3RpdGxlXCI+0JjQt9Cx0YDQsNC90L3QvtC1PC9oMj48ZGl2IGlkPVwiZmF2b3JpdGVzLXdyYXBcIiBjbGFzcz1cImJsb2NrLWluZm9fX3dyYXBcIj48L2Rpdj48L3NlY3Rpb24+PC9kaXY+JyArXHJcbiAgICAnPC9kaXY+JztcclxufVxyXG4iLCJpbXBvcnQgbG9hZE1hcCBmcm9tICcuL2xvYWRNYXAuanMnO1xyXG5pbXBvcnQgeyBldmVudEJ1cyB9IGZyb20gJy4vLi4vaW5kZXguanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Rm9yZWNhc3RCeUxhdExuZyhsb2NhdGlvbikge1xyXG4gIGxldCBxdWVyeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXTpjaGVja2VkJykudmFsdWU7XHJcbiAgbG9hZE1hcCgnbWFwJywgbG9jYXRpb24pO1xyXG4gIGdldEZvcmVjYXN0QnlSZXF1ZXN0KGxvY2F0aW9uLCBxdWVyeSlcclxuICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICBldmVudEJ1cy50cmlnZ2VyKCdjdXJyZW50V2VhdGhlcicsIGRhdGEpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEZvcmVjYXN0QnlSZXF1ZXN0KGxvY2F0aW9uLCBxdWVyeSkge1xyXG4gIGNvbnN0IEtFWV9EQVJLX1NLWSA9IGA5YjRlNjgxMDRmZmY2MmFlNzdkYzI0YmM1MGY2NzA2YWA7XHJcbiAgbGV0IGxhdCA9IGxvY2F0aW9uLmxhdDtcclxuICBsZXQgbG5nID0gbG9jYXRpb24ubG5nO1xyXG4gIGxldCB1cmwgPSBgaHR0cHM6Ly9jb3JzLWFueXdoZXJlLmhlcm9rdWFwcC5jb20vaHR0cHM6Ly9hcGkuZGFya3NreS5uZXQvZm9yZWNhc3QvJHtLRVlfREFSS19TS1l9LyR7bGF0fSwke2xuZ30/bGFuZz1ydSZ1bml0cz1zaWA7XHJcbiAgcmV0dXJuIHF1ZXJ5ID09PSAneGhyJyA/IGdldEZvcmVjYXN0QnlYSFIodXJsKSA6IGdldEZvcmVjYXN0QnlGZXRjaCh1cmwpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRGb3JlY2FzdEJ5WEhSKHVybCkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICB4aHIub3BlbihgR0VUYCwgYCR7dXJsfWAsIHRydWUpO1xyXG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IF8gPT4ge1xyXG4gICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgIT09IDQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHhoci5zdGF0dXMgIT09IDIwMCkge1xyXG4gICAgICAgIHJlamVjdChcclxuICAgICAgICAgIGDQntGI0LjQsdC60LA6ICR7XHJcbiAgICAgICAgICAgIHhoci5zdGF0dXMgPyB4aHIuc3RhdHVzVGV4dCA6ICfQn9GA0L7Qs9C90L7QtyDQv9C+0LPQvtC00Ysg0L/QvtC70YPRh9C40YLRjCDQvdC1INGD0LTQsNC70L7RgdGMJ1xyXG4gICAgICAgICAgfWBcclxuICAgICAgICApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZSh4aHIucmVzcG9uc2UpKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHhoci5zZW5kKCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEZvcmVjYXN0QnlGZXRjaCh1cmwpIHtcclxuICByZXR1cm4gZmV0Y2goYCR7dXJsfWApXHJcbiAgICAudGhlbihyZXEgPT4ge1xyXG4gICAgICBpZiAocmVxLnN0YXR1cyA+PSAyMDAgJiYgcmVxLnN0YXR1cyA8IDMwMCkge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVxKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKHJlcS5zdGF0dXNUZXh0KSk7XHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICAudGhlbihyZXEgPT4gcmVxLmpzb24oKSlcclxuICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICByZXR1cm4gYCfQn9GA0L7Qs9C90L7QtyDQv9C+0LPQvtC00Ysg0L/QvtC70YPRh9C40YLRjCDQvdC1INGD0LTQsNC70L7RgdGMJywgJHtlcnJ9YDtcclxuICAgIH0pO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVzZXJQb3NpdGlvbigpIHtcclxuICBjb25zdCBVUkxfQVBJX1VTRVJfUE9TSVRJT04gPSAnaHR0cHM6Ly9hcGkudXNlcmluZm8uaW8vdXNlcmluZm9zJztcclxuICByZXR1cm4gZmV0Y2goYCR7VVJMX0FQSV9VU0VSX1BPU0lUSU9OfWApXHJcbiAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyA8IDMwMCkge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCkpO1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgfSlcclxuICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICBsZXQgdXJsID0gYGNlbnRlcj0ke2RhdGEucG9zaXRpb24ubGF0aXR1ZGV9LCR7ZGF0YS5wb3NpdGlvbi5sb25naXR1ZGV9YDtcclxuICAgICAgcmV0dXJuIHVybDtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ9Ce0L/RgNC10LTQtdC70LjRgtGMINC60L7QvtGA0LTQuNC90LDRgtGLINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQvdC1INGD0LTQsNC70L7RgdGMJywgZXJyKTtcclxuICAgICAgbGV0IHVybCA9IGBjZW50ZXI9NTUsMzBgO1xyXG4gICAgICByZXR1cm4gdXJsOyAvL9C00LXRhNC+0LvRgtC90L7QtSDQt9C90LDRh9C10L3QuNC1LCDQtdGB0LvQuCDQvdC1INC+0YLQstC10YLQsCDQvtGCIEFQSVxyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICcuLi9pbmRleC5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2FkTWFwKGlkLCBwb3NpdGlvbikge1xyXG4gIGxldCB7bGF0LCBsbmd9ID0gcG9zaXRpb247XHJcbiAgdmFyIG1hcDtcclxuXHJcbiAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYXAnKSAmJiB3aW5kb3cubG9jYXRpb24uaGFzaC5tYXRjaCgvY2l0eS8pKSB7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWFwJykuaW5uZXJIVE1MID0gJyc7XHJcbiAgfVxyXG5cclxuICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYXAnKS5jaGlsZE5vZGVzLmxlbmd0aCkge1xyXG4gICAgeW1hcHMucmVhZHkoaW5pdCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpbml0KCkge1xyXG4gICAgbWFwID0gbmV3IHltYXBzLk1hcChpZCwge1xyXG4gICAgICBjZW50ZXI6IFtsYXQsIGxuZ10sXHJcbiAgICAgIHpvb206IDcsXHJcbiAgICAgIGNvbnRyb2xzOiBbJ3pvb21Db250cm9sJ11cclxuICAgIH0pO1xyXG5cclxuICAgIG1hcC5ldmVudHMuYWRkKCdhY3Rpb25lbmQnLCBnZXROZXdDZW50ZXIpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGdldE5ld0NlbnRlcigpIHtcclxuICAgICAgbGV0IG5ld0NlbnRlciA9IG1hcC5nZXRDZW50ZXIoKTtcclxuICAgICAgdmFyIHVybCA9IGBjZW50ZXI9JHtuZXdDZW50ZXJbMF19LCR7bmV3Q2VudGVyWzFdfWA7XHJcbiAgICAgIGV2ZW50QnVzLnRyaWdnZXIoJ2NoYW5nZVVybCcsIHVybCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==

//# sourceMappingURL=data:application/json;charset=utf8;base64,
