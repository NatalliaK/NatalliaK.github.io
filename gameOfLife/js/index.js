(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = drawPageAbout;
function drawPageAbout(htmlEl) {
  htmlEl.innerHTML = '<h2 class="about__title">Об игре «Жизнь»</h2><p class="about__text">Игра «Жизнь» — клеточный автомат, придуманный английским математиком Джоном Конвеем в 1970 году.</p><h3 class="about__title about__title--small">Правила игры:</h3><ul class="about__list"><li class="about__item">Место действия этой игры — «вселенная» — это размеченная на клетки поверхность или плоскость — безграничная, ограниченная, или замкнутая (в пределе — бесконечная плоскость).</li><li class="about__item">Каждая клетка на этой поверхности может находиться в двух состояниях: быть «живой» (заполненной) или быть «мёртвой» (пустой). Клетка имеет восемь соседей, окружающих её.</li><li class="about__item"><span>Распределение живых клеток в начале игры называется первым поколением. Каждое следующее поколение рассчитывается на основе предыдущего по таким правилам:</span><ul class="about__list about__list--inner"><li class="about__item">в пустой (мёртвой) клетке, рядом с которой ровно три живые клетки, зарождается жизнь.</li><li class="about__item">Если у живой клетки есть две или три живые соседки, то эта клетка продолжает жить. В противном случае, если соседей меньше двух или больше трёх, клетка умирает («от одиночества» или «от перенаселённости»)</li></ul></li><li class="about__item"><span>Игра прекращается, если:</span><ul><li class="about__item">на поле не останется ни одной «живой» клетки</li><li class="about__item">конфигурация на очередном шаге в точности (без сдвигов и поворотов) повторит себя же на одном из более ранних шагов (складывается периодическая конфигурация)</li><li class="about__item">при очередном шаге ни одна из клеток не меняет своего состояния (складывается стабильная конфигурация; предыдущее правило, вырожденное до одного шага назад)</li></ul></li class=about__item></ul><p class="about__text">Игрок не принимает прямого участия в игре, а лишь расставляет или генерирует начальную конфигурацию «живых» клеток, которые затем взаимодействуют согласно правилам уже без его участия (он является наблюдателем).</p>';
}

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require('../index');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CanvasField = function () {
  function CanvasField(state, htmlEl) {
    var _this = this;

    _classCallCheck(this, CanvasField);

    this.SIZE_CELL = state.SIZE_CELL;
    this.arr = state[state.count];
    this.htmlEl = htmlEl;

    _index.eventBus.on('field: drawGameField', function (param) {
      _this.arr = param.arr;
      _this.SIZE_CELL = param.SIZE_CELL;
      _this.htmlEl = param.htmlEl;
      _this.drawCanvasField();
    });

    _index.eventBus.trigger('field: drawGameField', {
      arr: this.arr,
      SIZE_CELL: this.SIZE_CELL,
      htmlEl: this.htmlEl
    });
  }

  _createClass(CanvasField, [{
    key: 'drawCanvasField',
    value: function drawCanvasField() {
      if (!document.querySelector('#canvas')) {
        this.canvas = document.createElement('canvas');
        this.canvas.id = 'canvas';
        this.canvas.classList.add('canvas-field');
      } else {
        this.canvas = document.querySelector('#canvas');
      }
      this.ctx = this.canvas.getContext('2d');
      this.htmlEl.appendChild(this.canvas);
      this.canvas.width = this.SIZE_CELL * this.arr[0].length;
      this.canvas.height = this.SIZE_CELL * this.arr.length;
      this.canvas.style.backgroundColor = 'rgba(255, 255, 255, 0.7)';
      var img = new Image();
      drawPict(this.arr, this.ctx, this.SIZE_CELL);

      function drawPict(arr, ctx, sizeCell) {
        img.addEventListener('load', function () {
          for (var i = 0; i < arr.length; i++) {
            for (var j = 0; j < arr[i].length; j++) {
              if (arr[i][j]) {
                var x = j * sizeCell;
                var y = i * sizeCell;

                ctx.drawImage(img, x, y, sizeCell, sizeCell);
              } else {
                ctx.stroke();
              }
            }
          }
        }, false);
        img.src = 'img/smile.png';
      }
    }
  }]);

  return CanvasField;
}();

exports.default = CanvasField;

},{"../index":4}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require('../index');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controls = function () {
  function Controls(htmlEl) {
    var _this = this;

    _classCallCheck(this, Controls);

    this.htmlEl = htmlEl;
    this.timer;
    _index.eventBus.on('controls: playGame', this.playGame.bind(this));
    _index.eventBus.on('controls: stopGame', this.stopGame.bind(this));

    this.htmlEl.querySelector('#btn-play').addEventListener('click', function (e) {
      var parentEl = e.target.parentNode;
      if (e.target.id === 'play') {
        parentEl.innerHTML = '<img id="pause" src="img/pause.png" class="controls__img">';
        _index.eventBus.trigger('controls: playGame', _this.setSpeedGame());
      } else if (e.target.id = 'pause') {
        parentEl.innerHTML = '<img id="play" src="img/play.png" class="controls__img">';
        _index.eventBus.trigger('controls: stopGame');
      }
    });

    this.htmlEl.querySelector('#btn-next').addEventListener('click', function (_) {
      _index.eventBus.trigger('controls: stopGame');
      _index.eventBus.trigger('field: nextStep');
    });

    this.htmlEl.querySelector('#btn-back').addEventListener('click', function (_) {
      _index.eventBus.trigger('controls: stopGame');
      _index.eventBus.trigger('field: prevStep');
    });

    this.htmlEl.addEventListener('change', function (e) {
      if (e.target.tagName === 'SELECT') {
        _index.eventBus.trigger('field: changeSizeGameField', _this.setSizeField.bind(_this));
      } else if (e.target.id === 'speed' && _this.htmlEl.querySelector('#pause')) {
        _index.eventBus.trigger('controls: stopGame');
        _index.eventBus.trigger('controls: playGame', _this.setSpeedGame());
      }
    });
  }

  _createClass(Controls, [{
    key: 'setSizeField',
    value: function setSizeField() {
      this.widthField = this.htmlEl.querySelector('#x').options[this.htmlEl.querySelector('#x').selectedIndex].value;
      this.heightField = this.htmlEl.querySelector('#y').options[this.htmlEl.querySelector('#y').selectedIndex].value;
      return { col: this.widthField, row: this.heightField };
    }
  }, {
    key: 'setSpeedGame',
    value: function setSpeedGame() {
      this.speed = this.htmlEl.querySelector('#speed').value;
      return this.speed;
    }
  }, {
    key: 'playGame',
    value: function playGame(speed) {
      this.timer = setInterval(function (_) {
        _index.eventBus.trigger('field: nextStep');
      }, 1000 * 1.5 / speed);
    }
  }, {
    key: 'stopGame',
    value: function stopGame() {
      clearInterval(this.timer);
    }
  }]);

  return Controls;
}();

exports.default = Controls;

},{"../index":4}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eventBus = undefined;

var _EventBus = require('./utils/EventBus');

var _EventBus2 = _interopRequireDefault(_EventBus);

var _router = require('./utils/router');

var _router2 = _interopRequireDefault(_router);

var _about = require('./about/about');

var _about2 = _interopRequireDefault(_about);

var _matrix = require('./matrix/matrix');

var _matrix2 = _interopRequireDefault(_matrix);

var _textField = require('./textField/textField');

var _textField2 = _interopRequireDefault(_textField);

var _canvasField = require('./canvasField/canvasField');

var _canvasField2 = _interopRequireDefault(_canvasField);

var _svgField = require('./svgField/svgField');

var _svgField2 = _interopRequireDefault(_svgField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var eventBus = exports.eventBus = new _EventBus2.default();
var about = document.querySelector('#about');
var controls = document.querySelector('#controls');
var fieldCont = document.querySelector('#game-field');
var state = { count: 1 };
var game = new _matrix2.default({
  state: state,
  controlsCont: controls,
  fieldCont: fieldCont
});

document.querySelector('#new-game').addEventListener('click', function (_) {
  document.querySelector('#btn-play').innerHTML = '<img id="play" src="img/play.png" class="controls__img">';
  state = game.drawNewField();
  state[1] = state[state.count];
  state.count = 1;
  eventBus.trigger('controls: stopGame');
});

eventBus.on('drawPageAbout', _about2.default);

var router = new _router2.default({
  routes: [{
    name: 'About',
    match: '',
    onBeforeEnter: function onBeforeEnter() {
      controls.classList.add('hide');
      about.classList.remove('hide');
      eventBus.trigger('controls: stopGame');
    },

    onEnter: function onEnter() {
      eventBus.trigger('drawPageAbout', about);
    },

    onLeave: function onLeave() {
      about.innerHTML = '';
      controls.classList.remove('hide');
    }
  }, {
    name: 'text',
    match: 'text',
    onBeforeEnter: function onBeforeEnter() {
      about.classList.add('hide');
    },

    onEnter: function onEnter() {
      new _textField2.default(state, fieldCont);
    },

    onLeave: function onLeave() {
      fieldCont.innerHTML = '';
      eventBus.off('field: drawGameField');
    }
  }, {
    name: 'canvas',
    match: 'canvas',
    onBeforeEnter: function onBeforeEnter() {
      about.classList.add('hide');
    },

    onEnter: function onEnter() {
      new _canvasField2.default(state, fieldCont);
    },

    onLeave: function onLeave() {
      fieldCont.innerHTML = '';
      eventBus.off('field: drawGameField');
    }
  }, {
    name: 'SVG',
    match: 'svg',
    onBeforeEnter: function onBeforeEnter() {
      about.classList.add('hide');
    },

    onEnter: function onEnter() {
      new _svgField2.default(state, fieldCont);
    },

    onLeave: function onLeave() {
      fieldCont.innerHTML = '';
      eventBus.off('field: drawGameField');
    }
  }]
});

},{"./about/about":1,"./canvasField/canvasField":2,"./matrix/matrix":5,"./svgField/svgField":6,"./textField/textField":7,"./utils/EventBus":8,"./utils/router":9}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require('../index');

var _controls = require('../controls/controls');

var _controls2 = _interopRequireDefault(_controls);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GetMatrixGame = function () {
  function GetMatrixGame(param) {
    _classCallCheck(this, GetMatrixGame);

    this.controlsCont = param.controlsCont;
    this.fieldCont = param.fieldCont;
    this.controls = new _controls2.default(this.controlsCont);
    this.state = param.state;
    this.count = this.state.count;
    this.init();
  }

  _createClass(GetMatrixGame, [{
    key: 'init',
    value: function init() {
      this.setInitState();
      _index.eventBus.on('field: changeSizeGameField', this.drawNewField.bind(this));
      _index.eventBus.on('field: newGame', this.drawNewField.bind(this));
      this.changeViewGameField();
      this.fieldCont.addEventListener('click', this.clickToCell.bind(this));
      this.createNextStep();
      this.createPrevStep();
    }
  }, {
    key: 'setInitState',
    value: function setInitState() {
      this.sizeField = this.controls.setSizeField();
      this.row = +this.sizeField.row;
      this.col = +this.sizeField.col;
      this.arr = this.createMatrix();
      this.state.SIZE_CELL = this.getSizeCell();
      this.count = this.state.count;
      this.state[this.count] = this.arr;
      this.SIZE_CELL = this.state.SIZE_CELL;
    }
  }, {
    key: 'drawNewField',
    value: function drawNewField() {
      this.setInitState();
      _index.eventBus.trigger('field: drawGameField', {
        arr: this.arr,
        SIZE_CELL: this.SIZE_CELL,
        htmlEl: this.fieldCont
      });
      return this.state;
    }
  }, {
    key: 'createMatrix',
    value: function createMatrix() {
      var arr = [];
      for (var i = 0; i < this.row; i++) {
        arr.push([]);
        for (var j = 0; j < this.col; j++) {
          if (i === 0 && j === 0 || i === 1 && (j === 1 || j === 2) || i === 2 && (j === 0 || j === 1)) {
            arr[i].push(1);
          } else {
            arr[i].push(0);
          }
        }
      }
      return arr;
    }
  }, {
    key: 'getSizeCell',
    value: function getSizeCell() {
      var SIZE_CELL = this.col > this.row ? Math.floor(document.documentElement.clientWidth * 0.7 / this.col) : Math.floor(document.documentElement.clientHeight * 0.7 / this.row);
      return SIZE_CELL;
    }
  }, {
    key: 'clickToCell',
    value: function clickToCell(e) {
      _index.eventBus.trigger('field: clickGameField', e);
    }
  }, {
    key: 'changeViewGameField',
    value: function changeViewGameField() {
      var _this = this;

      _index.eventBus.on('field: clickGameField', function (e) {
        e.preventDefault();
        var eX = e.offsetX,
            eY = e.offsetY;

        var col = Math.floor(eX / _this.SIZE_CELL);
        var row = Math.floor(eY / _this.SIZE_CELL);
        _this.arr[row][col] === 1 ? _this.arr[row].splice(col, 1, 0) : _this.arr[row].splice(col, 1, 1);
        _index.eventBus.trigger('field: drawGameField', {
          arr: _this.state[_this.count],
          SIZE_CELL: _this.SIZE_CELL,
          htmlEl: _this.fieldCont
        });
      });
    }
  }, {
    key: 'createNextStep',
    value: function createNextStep() {
      var _this2 = this;

      _index.eventBus.on('field: nextStep', function () {
        var nextArr = [];
        var neighbors = 0;

        for (var i = 0; i < _this2.arr.length; i++) {
          nextArr[i] = [];
          for (var j = 0; j < _this2.arr[i].length; j++) {
            if (_this2.arr[i - 1]) {
              _this2.arr[i - 1][j] === 1 ? neighbors++ : neighbors;
            }
            if (_this2.arr[i + 1]) {
              _this2.arr[i + 1][j] === 1 ? neighbors++ : neighbors;
            }

            if (_this2.arr[i][j + 1]) {
              _this2.arr[i][j + 1] === 1 ? neighbors++ : neighbors;
            }

            if (_this2.arr[i][j - 1]) {
              _this2.arr[i][j - 1] === 1 ? neighbors++ : neighbors;
            }

            if (_this2.arr[i - 1] && _this2.arr[i - 1][j - 1]) {
              _this2.arr[i - 1][j - 1] === 1 ? neighbors++ : neighbors;
            }

            if (_this2.arr[i - 1] && _this2.arr[i - 1][j + 1]) {
              _this2.arr[i - 1][j + 1] === 1 ? neighbors++ : neighbors;
            }

            if (_this2.arr[i + 1] && _this2.arr[i + 1][j + 1]) {
              _this2.arr[i + 1][j + 1] === 1 ? neighbors++ : neighbors;
            }

            if (_this2.arr[i + 1] && _this2.arr[i + 1][j - 1]) {
              _this2.arr[i + 1][j - 1] === 1 ? neighbors++ : neighbors;
            }

            if (_this2.arr[i][j] === 0 && neighbors === 3) {
              nextArr[i].push(1);
            } else if (_this2.arr[i][j] === 1 && (neighbors === 2 || neighbors === 3)) {
              nextArr[i].push(1);
            } else {
              nextArr[i].push(0);
            }
            neighbors = 0;
          }
        }

        _this2.arr = nextArr;
        _this2.count++;
        _this2.state[_this2.count] = _this2.arr;
        _this2.state.count = _this2.count;
        _index.eventBus.trigger('field: drawGameField', {
          arr: _this2.state[_this2.count],
          SIZE_CELL: _this2.SIZE_CELL,
          htmlEl: _this2.fieldCont
        });
        _this2.gameOver();
      });
    }
  }, {
    key: 'createPrevStep',
    value: function createPrevStep() {
      var _this3 = this;

      _index.eventBus.on('field: prevStep', function () {
        if (!_this3.state[_this3.count] || _this3.count === 1) {
          return;
        } else {
          delete _this3.state[_this3.count];
          _this3.count--;
          _this3.state.count = _this3.count;
          _index.eventBus.trigger('field: drawGameField', {
            arr: _this3.state[_this3.count],
            SIZE_CELL: _this3.SIZE_CELL,
            htmlEl: _this3.fieldCont
          });
        }
      });
    }
  }, {
    key: 'gameOver',
    value: function gameOver() {
      var stopGame = true;

      this.state[this.count].forEach(function (el) {
        el.forEach(function (elem) {
          if (elem === 1) {
            stopGame = false;
            return;
          }
        });
        if (stopGame === false) return;
      });

      this.state[this.count].join() === this.state[this.count - 1].join() ? stopGame = true : stopGame = false;

      if (stopGame === true) {
        alert('Конец игры!');
        _index.eventBus.trigger('controls: stopGame');
        this.fieldCont.parentNode.querySelector('#btn-play').innerHTML = '<img src="img/play.png" class="controls__img">';
      }
    }
  }]);

  return GetMatrixGame;
}();

exports.default = GetMatrixGame;

},{"../controls/controls":3,"../index":4}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require('../index');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SvgField = function () {
  function SvgField(state, htmlEl) {
    var _this = this;

    _classCallCheck(this, SvgField);

    this.SIZE_CELL = state.SIZE_CELL;
    this.arr = state[state.count];
    this.htmlEl = htmlEl;

    _index.eventBus.on('field: drawGameField', function (param) {
      _this.arr = param.arr;
      _this.SIZE_CELL = param.SIZE_CELL;
      _this.htmlEl = param.htmlEl;
      _this.drawSvgField();
    });

    _index.eventBus.trigger('field: drawGameField', {
      arr: this.arr,
      SIZE_CELL: this.SIZE_CELL,
      htmlEl: this.htmlEl
    });
  }

  _createClass(SvgField, [{
    key: 'drawSvgField',
    value: function drawSvgField() {
      var SVG_NS = 'http://www.w3.org/2000/svg';

      if (document.querySelector('#game-field').childNodes.length) {
        this.field = document.querySelector('#field');
        this.field.innerHTML = '';
      } else {
        this.field = document.createElementNS(SVG_NS, 'svg');
        this.field.classList.add('svg-field');
        this.field.id = 'field';
        this.htmlEl.appendChild(this.field);
      }

      this.fieldWrap = document.createElementNS(SVG_NS, 'rect');
      this.fieldWrap.classList.add('svg-field__rect');
      this.field.appendChild(this.fieldWrap);
      this.field.setAttribute('width', this.arr[0].length * this.SIZE_CELL);
      this.field.setAttribute('height', this.arr.length * this.SIZE_CELL);

      for (var i = 0; i < this.arr.length; i++) {
        for (var j = 0; j < this.arr[i].length; j++) {
          if (this.arr[i][j]) {
            var figure = '<image href="img/tongue-out.svg" x="' + this.SIZE_CELL * j + '" y="' + this.SIZE_CELL * i + '" height="' + this.SIZE_CELL + '" width="' + this.SIZE_CELL + '"/>';
            this.field.innerHTML += figure;
          }
        }
      }
    }
  }]);

  return SvgField;
}();

exports.default = SvgField;

},{"../index":4}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require('../index');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextField = function () {
  function TextField(state, htmlEl) {
    var _this = this;

    _classCallCheck(this, TextField);

    this.SIZE_CELL = state.SIZE_CELL;
    this.arr = state[state.count];
    this.htmlEl = htmlEl;

    _index.eventBus.on('field: drawGameField', function (param) {
      _this.arr = param.arr;
      _this.SIZE_CELL = param.SIZE_CELL;
      _this.htmlEl = param.htmlEl;
      _this.drawTextField();
    });

    _index.eventBus.trigger('field: drawGameField', {
      arr: this.arr,
      SIZE_CELL: this.SIZE_CELL,
      htmlEl: this.htmlEl
    });
  }

  _createClass(TextField, [{
    key: 'drawTextField',
    value: function drawTextField() {
      this.field = '';
      if (!document.querySelector('pre')) {
        var pre = document.createElement('pre');
        this.htmlEl.appendChild(pre);
        pre.classList.add('text-field');
      } else {
        pre = document.querySelector('pre');
      }
      pre.style.fontSize = this.SIZE_CELL + 'px';
      pre.style.lineHeight = this.SIZE_CELL + 'px';
      pre.style.letterSpacing = this.SIZE_CELL / 6.5 + 'px';

      for (var i = 0; i < this.arr.length; i++) {
        for (var j = 0; j < this.arr[i].length; j++) {
          this.field += this.arr[i][j] ? 'X' : ' ';
        }
        this.field += '\n';
      }
      pre.innerHTML = this.field;
    }
  }]);

  return TextField;
}();

exports.default = TextField;

},{"../index":4}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventBus = function () {
  function EventBus() {
    _classCallCheck(this, EventBus);

    this.listeners = {};
  }

  _createClass(EventBus, [{
    key: "on",
    value: function on(eventName, cb) {
      if (!this.listeners[eventName]) {
        this.listeners[eventName] = [];
      }

      this.listeners[eventName].push(cb);
    }
  }, {
    key: "off",
    value: function off(eventName, cb) {
      this.listeners[eventName] = this.listeners[eventName] || [];
      this.listeners[eventName].splice(this.listeners[eventName].indexOf(cb), 1);
    }
  }, {
    key: "trigger",
    value: function trigger(eventName, data) {
      this.listeners[eventName] = this.listeners[eventName] || [];
      this.listeners[eventName].forEach(function (cb) {
        cb(data);
      });
    }
  }, {
    key: "once",
    value: function once(eventName, cb) {
      var func = function (data) {
        cb(data);
        this.off(eventName, func);
      }.bind(this);

      this.on(eventName, func);
    }
  }]);

  return EventBus;
}();

exports.default = EventBus;

},{}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Router = function () {
  function Router(options) {
    var _this = this;

    _classCallCheck(this, Router);

    this.routes = options.routes || [];
    this.previosRoute;
    this.nextRoute;
    this.prev;
    this.next;
    this.EventBus = options.EventBus;

    this.handleUrl(window.location.hash);
    window.addEventListener('hashchange', function () {
      _this.handleUrl(window.location.hash);
    });
  }

  _createClass(Router, [{
    key: 'handleUrl',
    value: function handleUrl(url) {
      var _this2 = this;

      this.previosRoute = this.nextRoute;
      this.prev = this.next;
      this.url = url.replace(/#/, '');
      this.routes.forEach(function (el) {
        if (typeof el.match === 'string' && _this2.url === el.match) {
          _this2.nextRoute = url;
          _this2.next = el || {};
        } else if (typeof el.match === 'function' && el.match(_this2.url)) {
          _this2.nextRoute = _this2.url;
          _this2.next = el;
        } else if (el.match instanceof RegExp && decodeURI(_this2.url).search(el.match) !== -1) {
          _this2.url = decodeURI(_this2.url);
          _this2.nextRoute = _this2.url.match(el.match);
          _this2.nextRoute = _this2.nextRoute[0];
          _this2.next = el;
        }
      });
      if (this.previosRoute !== this.nextRoute) {
        Promise.resolve().then(function () {
          _this2.prev && _this2.prev.onLeave && _this2.prev.onLeave(_this2.previosRoute);
        }).then(function () {
          _this2.next && _this2.next.onBeforeEnter && _this2.next.onBeforeEnter(_this2.nextRoute);
        }).then(function () {
          _this2.next && _this2.next.onEnter && _this2.next.onEnter(_this2.nextRoute);
        });
      }
    }
  }]);

  return Router;
}();

exports.default = Router;

},{}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
